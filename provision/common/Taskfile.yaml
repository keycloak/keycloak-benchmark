version: '3'

vars:
  KB_RETENTION: '{{default "168h" .KB_RETENTION}}'
  KC_OTEL: '{{default "false" .KC_OTEL}}'
  KC_CRYOSTAT: '{{default "true" .KC_CRYOSTAT}}'
  KC_OTEL_SAMPLING_PERCENTAGE: '{{default "0.001" .KC_OTEL_SAMPLING_PERCENTAGE}}'
  KC_DB_POOL_INITIAL_SIZE: '{{default "5" .KC_DB_POOL_INITIAL_SIZE}}'
  KC_DB_POOL_MAX_SIZE: '{{default "10" .KC_DB_POOL_MAX_SIZE}}'
  KC_DB_POOL_MIN_SIZE: '{{default "5" .KC_DB_POOL_MIN_SIZE}}'
  KC_DATABASE: '{{default "postgres" .KC_DATABASE}}'
  KC_OPERATOR_TAG: '{{default "nightly" .KC_OPERATOR_TAG}}'
  KC_CONTAINER_IMAGE: '{{default "" .KC_CONTAINER_IMAGE}}'
  KC_INSTANCES: '{{default "1" .KC_INSTANCES}}'
  KC_CPU_REQUESTS: '{{default "0" .KC_CPU_REQUESTS}}'
  KC_CPU_LIMITS: '{{default "" .KC_CPU_LIMITS}}'
  KC_MEMORY_REQUESTS_MB: '{{default "1024" .KC_MEMORY_REQUESTS_MB}}'
  KC_MEMORY_LIMITS_MB: '{{default "1024" .KC_MEMORY_LIMITS_MB}}'
  KC_METASPACE_INIT_MB: '{{default "96" .KC_METASPACE_INIT_MB}}'
  KC_METASPACE_MAX_MB: '{{default "256" .KC_METASPACE_MAX_MB}}'
  KC_CUSTOM_INFINISPAN_CONFIG: '{{default "true" .KC_CUSTOM_INFINISPAN_CONFIG}}'
  KC_CUSTOM_INFINISPAN_CONFIG_FILE: '{{default "config/kcb-infinispan-cache-config.xml" .KC_CUSTOM_INFINISPAN_CONFIG_FILE}}'
  KC_REMOTE_STORE: '{{default "false" .KC_REMOTE_STORE}}'
  KC_REMOTE_STORE_HOST: '{{default "localhost" .KC_REMOTE_STORE_HOST}}'
  KC_REMOTE_STORE_PORT: '{{default "11222" .KC_REMOTE_STORE_PORT}}'
  KC_DISABLE_STICKY_SESSION: '{{default "false" .KC_DISABLE_STICKY_SESSION}}'
  MULTI_AZ: '{{default "false" .MULTI_AZ}}'
  ENV_DATA_JSON_PATH: "{{.ROOT_DIR}}/../environment_data.json"
  KC_REPOSITORY: '{{default "" .KC_REPOSITORY}}'
  KC_BRANCH: '{{default "" .KC_BRANCH}}'
tasks:

  split:
    desc: Split Taskfile to one-file-per-task for dirty checking
    # avoid 'once' until https://github.com/go-task/task/issues/715 when running with parameter '-C 1'
    run: once
    cmds:
      - bash -c ../common/split.sh
    sources:
      - Taskfile.yaml
      - ../common/split.sh
      - ../common/Taskfile.yaml
    silent: true

  env:
    deps:
      - split
    cmds:
      # create marker files that can then be checked in other tasks
      - mkdir -p .task
      - echo {{.KB_RETENTION}} > .task/var-KB_RETENTION
      - echo {{.KC_OTEL}} > .task/var-KC_OTEL
      - echo {{.KC_OTEL_SAMPLING_PERCENTAGE}} > .task/var-KC_OTEL_SAMPLING_PERCENTAGE
      - echo {{.KC_DB_POOL_INITIAL_SIZE}} > .task/var-KC_DB_POOL_INITIAL_SIZE
      - echo {{.KC_DB_POOL_MAX_SIZE}} > .task/var-KC_DB_POOL_MAX_SIZE
      - echo {{.KC_DB_POOL_MIN_SIZE}} > .task/var-KC_DB_POOL_MIN_SIZE
      - echo {{.KC_DATABASE}} > .task/var-KC_DATABASE
      - echo {{.KC_OPERATOR_TAG}} > .task/var-KC_OPERATOR_TAG
      - echo {{.KC_CONTAINER_IMAGE}} > .task/var-KC_CONTAINER_IMAGE
      - echo {{.KC_INSTANCES}} > .task/var-KC_INSTANCES
      - echo {{.KC_CPU_REQUESTS}} > .task/var-KC_CPU_REQUESTS
      - echo {{.KC_CPU_LIMITS}} > .task/var-KC_CPU_LIMITS
      - echo {{.KC_MEMORY_REQUESTS_MB}} > .task/var-KC_MEMORY_REQUESTS_MB
      - echo {{.KC_MEMORY_LIMITS_MB}} > .task/var-KC_MEMORY_LIMITS_MB
      - echo {{.KC_METASPACE_INIT_MB}} > .task/var-KC_METASPACE_INIT_MB
      - echo {{.KC_METASPACE_MAX_MB}} > .task/var-KC_METASPACE_MAX_MB
      - echo {{.KC_CUSTOM_INFINISPAN_CONFIG}} > .task/var-KC_CUSTOM_INFINISPAN_CONFIG
      - echo {{.KC_CUSTOM_INFINISPAN_CONFIG_FILE}} > .task/var-KC_CUSTOM_INFINISPAN_CONFIG_FILE
      - echo {{.KC_REMOTE_STORE}} > .task/var-KC_REMOTE_STORE
      - echo {{.KC_REMOTE_STORE_HOST}} > .task/var-KC_REMOTE_STORE_HOST
      - echo {{.KC_REMOTE_STORE_PORT}} > .task/var-KC_REMOTE_STORE_PORT
      - echo {{.KC_DISABLE_STICKY_SESSION}} > .task/var-KC_DISABLE_STICKY_SESSION
      - echo {{.KC_HOSTNAME_OVERRIDE}} > .task/var-KC_HOSTNAME_OVERRIDE
      - echo {{.KC_HEALTH_HOSTNAME}} > .task/var-KC_HEALTH_HOSTNAME
      - |
        jq -n --arg cpu_requests_per_pod "{{ .KC_CPU_REQUESTS }}" \
          --arg cpu_limits_per_pod "{{ .KC_CPU_LIMITS }}" \
          --arg num_of_pods "{{ .KC_INSTANCES }}" \
          --argjson sticky_sessions "{{ .KC_DISABLE_STICKY_SESSION }}" \
          --arg mem_req_per_pod "{{ .KC_MEMORY_REQUESTS_MB }}" \
          --arg mem_limit_per_pod "{{ .KC_MEMORY_LIMITS_MB }}" \
          --arg db_pool_init "{{ .KC_DB_POOL_INITIAL_SIZE }}" \
          --arg db_pool_max "{{ .KC_DB_POOL_MAX_SIZE }}" \
          --arg db_pool_min "{{ .KC_DB_POOL_MIN_SIZE }}" \
          --arg meta_spc_init "{{ .KC_METASPACE_INIT_MB }}" \
          --arg meta_spc_max "{{ .KC_METASPACE_MAX_MB }}" \
          --arg database "{{ .KC_DATABASE }}" \
          --arg kc_operator_tag "{{ .KC_OPERATOR_TAG }}" \
          --arg kc_repo "{{ .KC_REPOSITORY }}" \
          --arg kc_branch "{{ .KC_BRANCH }}" \
          --argjson is_multi_az "{{ .MULTI_AZ }}" \
          '. + { "numOfPods": ($num_of_pods|tonumber), "cpuRequestsPerPod": ($cpu_requests_per_pod|tonumber),
                             "cpuLimitsPerPod": (if ($cpu_limits_per_pod | length) == 0 then null else ($cpu_limits_per_pod | tonumber?) end),
                             "stickySessionDisabled": ($sticky_sessions),
                             "memRequestsPerPod": ($mem_req_per_pod|tonumber),
                             "memLimitPerPod": ($mem_limit_per_pod|tonumber),
                             "dbPool": {
                               "init": ($db_pool_init|tonumber),
                               "min": ($db_pool_min|tonumber),
                               "max": ($db_pool_max|tonumber)
                             },
                             "metaspace": {
                               "init": ($meta_spc_init|tonumber),
                               "max": ($meta_spc_max|tonumber)
                             },
                            "isMultiAZ": ($is_multi_az),
                            "keycloakOperatorTag": ($kc_operator_tag),
                            "keycloakRepository": ($kc_repo),
                            "keycloakBranch": ($kc_branch),
                            "keycloakDatabase": ($database) }' > {{ .ENV_DATA_JSON_PATH }}
    run: once
    sources:
      - .task/subtask-{{.TASK}}.yaml
    status:
      - test "{{.KB_RETENTION}}" == "$(cat .task/var-KB_RETENTION)"
      - test "{{.KC_OTEL}}" == "$(cat .task/var-KC_OTEL)"
      - test "{{.KC_OTEL_SAMPLING_PERCENTAGE}}" == "$(cat .task/var-KC_OTEL_SAMPLING_PERCENTAGE)"
      - test "{{.KC_DB_POOL_INITIAL_SIZE}}" == "$(cat .task/var-KC_DB_POOL_INITIAL_SIZE)"
      - test "{{.KC_DB_POOL_MAX_SIZE}}" == "$(cat .task/var-KC_DB_POOL_MAX_SIZE)"
      - test "{{.KC_DB_POOL_MIN_SIZE}}" == "$(cat .task/var-KC_DB_POOL_MIN_SIZE)"
      - test "{{.KC_DATABASE}}" == "$(cat .task/var-KC_DATABASE)"
      - test "{{.KC_OPERATOR_TAG}}" == "$(cat .task/var-KC_OPERATOR_TAG)"
      - test "{{.KC_CONTAINER_IMAGE}}" == "$(cat .task/var-KC_CONTAINER_IMAGE)"
      - test "{{.KC_INSTANCES}}" == "$(cat .task/var-KC_INSTANCES)"
      - test "{{.KC_CPU_REQUESTS}}" == "$(cat .task/var-KC_CPU_REQUESTS)"
      - test "{{.KC_CPU_LIMITS}}" == "$(cat .task/var-KC_CPU_LIMITS)"
      - test "{{.KC_MEMORY_REQUESTS_MB}}" == "$(cat .task/var-KC_MEMORY_REQUESTS_MB)"
      - test "{{.KC_MEMORY_LIMITS_MB}}" == "$(cat .task/var-KC_MEMORY_LIMITS_MB)"
      - test "{{.KC_METASPACE_INIT_MB}}" == "$(cat .task/var-KC_METASPACE_INIT_MB)"
      - test "{{.KC_METASPACE_MAX_MB}}" == "$(cat .task/var-KC_METASPACE_MAX_MB)"
      - test "{{.KC_CUSTOM_INFINISPAN_CONFIG}}" == "$(cat .task/var-KC_CUSTOM_INFINISPAN_CONFIG)"
      - test "{{.KC_CUSTOM_INFINISPAN_CONFIG_FILE}}" == "$(cat .task/var-KC_CUSTOM_INFINISPAN_CONFIG_FILE)"
      - test "{{.KC_REMOTE_STORE}}" == "$(cat .task/var-KC_REMOTE_STORE)"
      - test "{{.KC_REMOTE_STORE_HOST}}" == "$(cat .task/var-KC_REMOTE_STORE_HOST)"
      - test "{{.KC_REMOTE_STORE_PORT}}" == "$(cat .task/var-KC_REMOTE_STORE_PORT)"
      - test "{{.KC_DISABLE_STICKY_SESSION}}" == "$(cat .task/var-KC_DISABLE_STICKY_SESSION)"
      - test "{{.KC_HOSTNAME_OVERRIDE}}" == "$(cat .task/var-KC_HOSTNAME_OVERRIDE)"
      - test "{{.KC_HEALTH_HOSTNAME}}" == "$(cat .task/var-KC_HEALTH_HOSTNAME)"

  mvnw:
    dir: ../..
    run: once
    cmds:
      # download maven wrapper to avoid concurrent downloads with can break the build
      - bash -c "./mvnw -v"
    preconditions:
      # Either JAVA_HOME is set and points to a valid JDK folder with 'bin/java' in it,
      # or javac is found on the path which indicates a Java SDK to be installed.
      # This logic is similar to the one present in 'mvnw'
      - sh: "{ [ ! -z ${JAVA_HOME} ] && [ -x '${JAVA_HOME}/bin/java' ]; } || [ $(which javac) ] || [ $(uname) != Linux ]"
        msg: "Please set the JAVA_HOME env variable to point to a Java SDK."
    sources:
      - ../../.mvn/wrapper/maven-wrapper.properties
      - .task/subtask-{{.TASK}}.yaml
    generates:
      - ../../.mvn/wrapper/maven-wrapper.jar

  dataset:
    deps:
      - split
      - mvnw
    dir: ../..
    cmds:
      - bash -c "./mvnw -B -am -pl dataset clean install -DskipTests"
    sources:
      - ../../pom.xml
      - dataset/pom.xml
      - dataset/src/**/*.*
      - .task/subtask-{{.TASK}}.yaml
    generates:
      - dataset/target/keycloak-benchmark-dataset-*.jar

  datasetprovider:
    deps:
      - dataset
      - split
    dir: ../minikube
    cmds:
      - mkdir -p keycloak/providers
      - rm -f keycloak/providers/keycloak-benchmark-dataset-*.jar
      - cp ../../dataset/target/keycloak-benchmark-dataset-*.jar keycloak/providers
    sources:
      - ../../dataset/target/keycloak-benchmark-dataset-*.jar
      - .task/subtask-{{.TASK}}.yaml

  keycloak-cli-download:
    dir: ..
    cmds:
      - mkdir -p keycloak-cli
      - rm -f keycloak-cli/*.zip
      - >
        curl -L -f https://github.com/keycloak/keycloak/releases/download/nightly/keycloak-999.0.0-SNAPSHOT.zip -o keycloak-cli/keycloak.zip
    status:
      - find keycloak-cli/keycloak.zip -mtime +1 -exec false {} +
    sources:
      - .task/subtask-{{.TASK}}.yaml

  keycloak-cli-unzip:
    deps:
      - keycloak-cli-download
      - split
    dir: ..
    cmds:
      # remove temporary folders to be extra safe
      - rm -rf keycloak-cli/keycloak-999.0.0-SNAPSHOT
      - rm -rf keycloak-cli/keycloak
      - unzip -o -q keycloak-cli/keycloak.zip -d keycloak-cli
      # the output folder depends on the version we're about to unpack
      - mv keycloak-cli/keycloak-999.0.0-SNAPSHOT keycloak-cli/keycloak
    sources:
      - keycloak-cli/keycloak.zip
      - minikube/.task/subtask-{{.TASK}}.yaml

  tlsdisableagent:
    deps:
      - split
      - mvnw
    dir: ../tlsdisableagent
    cmds:
      - bash -c ./buildtlsagent.sh
    sources:
      - ../tlsdisableagent/hooks/*.*
      - ../tlsdisableagent/buildtlsagent.sh
      - ../tlsdisableagent/tlscheckdisable.txt
      - ../tlsdisableagent/java-instrumentation-tool/src/**/*.*
      - ../tlsdisableagent/java-instrumentation-tool/pom.xml
      - .task/subtask-{{.TASK}}.yaml
    generates:
      - ../tlsdisableagent/tlscheckdisable-agent.jar
