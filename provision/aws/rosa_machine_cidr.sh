#!/usr/bin/env bash
#
# Prints the machine CIDR for an existing ROSA cluster based on value of variable CLUSTER_NAME, 
# or generates a new one, if that cluster doesn't exist.
#
# Takes an optional parameter with a list of existing CIDRs generated by previous runs of the script,
# in case multiple CIDRs need to be generated before the actual clusters are created.
#
# https://access.redhat.com/documentation/en-us/red_hat_openshift_service_on_aws/4/html/networking/cidr-range-definitions
# Must not overlap with Pod CDR: 10.128.0.0/14
# Must not overlap with OVN Kubernetes: 100.64.0.0/16
#

set -e

if [[ "$RUNNER_DEBUG" == "1" ]]; then
  set -x
fi

EXISTING_MACHINE_CIDRS=$1

if [ -z "$CLUSTER_NAME" ]; then echo "CLUSTER_NAME needs to be set."; exit 1; fi

CLUSTERS=$(rosa list clusters -o json)
CLUSTER=$(echo $CLUSTERS | jq ".[] | select(.name == \"${CLUSTER_NAME}\")")
if [ -n "${CLUSTER}" ]; then
  echo ${CLUSTER} | jq -r .network.machine_cidr
else
  EXISTING_MACHINE_CIDRS="$(echo ${CLUSTERS} | jq -r ".[].network.machine_cidr" | sort -u)\n${EXISTING_MACHINE_CIDRS}"
  if (( $(echo ${EXISTING_MACHINE_CIDRS} | wc -l) > 63 )); then
    echo "Maximum number of unique machine CIDRS reached"
    echo ${EXISTING_MACHINE_CIDRS}
    exit 1
  fi
  while true; do
    CIDR="10.$(shuf -i 0-63 -n 1).0.0/16"
    if [[ "${EXISTING_MACHINE_CIDRS}" != *"${CIDR}"* ]]; then
      echo ${CIDR}
      break
    fi
  done
fi
