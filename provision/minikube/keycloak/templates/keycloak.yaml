apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: keycloak
  name: keycloak
  namespace: {{ .Values.namespace }}
spec:
  hostname:
    hostname: keycloak.{{ .Values.hostname }}
  additionalOptions:
{{ if or (eq .Values.database "postgres") (eq .Values.database "postgres+infinispan") }}
    - name: db
      value: postgres
    - name: db-url
      value: jdbc:postgresql://postgres:5432/keycloak
{{ else if eq .Values.database "cockroach-single" }}
    - name: db
      value: postgres
    - name: db-url
      value: jdbc:postgresql://cockroach:26257/keycloak?sslmode=disable
{{ else if eq .Values.database "cockroach-operator" }}
    - name: db
      value: postgres
    - name: db-url
      value:  jdbc:postgresql://cockroach-public:26257/keycloak?sslcert=%2Fcockroach%2Fcockroach-certs%2Fclient.root.crt&sslkey=%2Fcockroach%2Fcockroach-certs%2Fclient.root.key&sslmode=verify-full&sslrootcert=%2Fcockroach%2Fcockroach-certs%2Fca.crt&user=root
{{ end }}
{{ if or (eq .Values.database "infinispan") (eq .Values.database "postgres+infinispan") }}
    - name: storage-hotrod-host
      value: infinispan
    - name: storage-hotrod-port
      value: '11222'
    - name: storage-hotrod-username
      value: admin
    - name: storage-hotrod-password
      value: admin
{{ end }}
    - name: db-pool-min-size
      value: {{ quote .Values.dbPoolMinSize }}
    - name: db-pool-max-size
      value: {{ quote .Values.dbPoolMaxSize }}
    - name: db-pool-initial-size
      value: {{ quote .Values.dbPoolInitialSize }}
{{ if .Values.disableCaches }}
    - name: cache-realm-enabled
      value: 'false'
    - name: cache-user-enabled
      value: 'false'
    - name: cache-authorization-enabled
      value: 'false'
    - name: spi-public-key-cache-infinispan-enabled
      value: 'false'
{{ end }}
{{ if eq .Values.storage "jpa+hotrod" }}
    # in the mixed setup we set storage to jpa and override user sessions, auth sessions, single-use objects, and login failures to use hotrod
    - name: storage
      value: jpa
    - name: storage-area-auth-session
      value: hotrod
    - name: storage-area-user-session
      value: hotrod
    - name: storage-area-single-use-object
      value: hotrod
    - name: storage-area-login-failure
      value: hotrod
    - name: storage-deployment-state-version-seed
      value: some-secret-seed
{{ else if ne .Values.storage "" }}
    - name: storage
      value: {{ quote .Values.storage }}
    # this might eventually be set automatically by the operator
    # TODO: value should be stored as a secret instead in a production environment
    # https://github.com/keycloak/keycloak/issues/13377
    - name: storage-deployment-state-version-seed
      value: some-secret-seed
{{ end }}
    - name: log-console-output
      value: json
    - name: metrics-enabled
      value: 'true'
    - name: health-enabled
      value: 'true'
    - name: db-username
      secret:
        name: keycloak-db-secret
        key: username
    - name: db-password
      secret:
        name: keycloak-db-secret
        key: password
  http:
    tlsSecret: keycloak-tls-secret
  instances: {{ .Values.instances }}
  unsupported:
    podTemplate:
      metadata:
        annotations:
          checksum/config: {{ include (print $.Template.BasePath "/keycloak-providers-configmap.yaml") . | sha256sum }}-{{ include (print $.Template.BasePath "/postgres/postgres-deployment.yaml") . | sha256sum }}-{{ .Values.keycloakImage }}
      spec:
        {{ if .Values.otel }}
        initContainers:
          - name: download-otel
            image: registry.access.redhat.com/ubi8/ubi-minimal
            command:
              - /bin/bash
            args:
              - -c
              # language=bash
              - |
                if [ ! -e /otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar ]; then
                  curl -f -L https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/{{ .Values.otelVersion }}/opentelemetry-javaagent.jar -o /otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar
                fi
            volumeMounts:
              - name: otel
                mountPath: /otel
        {{ end }}
        containers:
          -
{{ if hasPrefix "localhost/" .Values.keycloakImage }}
            imagePullPolicy: Never
{{ end }}
            env:
{{ if .Values.otel }}
              # https://github.com/open-telemetry/opentelemetry-java-instrumentation
              # https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md
              - name: OTEL_RESOURCE_ATTRIBUTES
                value: service.name=keycloak
              - name: OTEL_TRACES_EXPORTER
                # with otel+tempo 1.4.1 forwarding of traces works, but searching is not returning all values for now, for example delete users was missing
                value: jaeger
              - name: OTEL_EXPORTER_JAEGER_ENDPOINT
                value: http://jaeger-collector.monitoring.svc:14250
              - name: OTEL_TRACES_SAMPLER
                value: parentbased_traceidratio # always_on, parentbased_traceidratio, ...
              - name: OTEL_TRACES_SAMPLER_ARG
                value: {{ .Values.otelSamplingPercentage | quote }}
              - name: OTEL_METRICS_EXPORTER
                value: prometheus
{{ end }}
{{ if eq .Values.storage "jpa" }}
              # avoid a warning when this is not set, see https://github.com/keycloak/keycloak/issues/16616
              - name: KC_SPI_MAP_STORAGE_JPA_LOCK_TIMEOUT
                value: "10000"
{{ end }}
              - name: JAVA_OPTS_APPEND
                # using non-blocking random, make DNS lookups expire after 10 seconds and not cache them forever
                value: >
                  -Xms{{ .Values.heapInitMB }}m -Xmx{{ .Values.heapMaxMB }}m
                  -XX:MetaspaceSize={{ .Values.metaspaceInitMB }}m -XX:MaxMetaspaceSize={{ .Values.metaspaceMaxMB }}m
                  -Djava.security.egd=file:/dev/urandom -Dnetworkaddress.cache.ttl=10 -XX:+ExitOnOutOfMemoryError
                  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8787
{{- if .Values.otel }}
                  -javaagent:/otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar
{{- end -}}
{{- if .Values.cryostat }}
                  -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
                  -XX:FlightRecorderOptions=stackdepth=512
{{- end -}}
{{- if or .Values.otel .Values.cryostat }}
            ports:
{{ end -}}
{{ if .Values.otel }}
              - containerPort: 9464
                protocol: TCP
                name: otel-prometheus
{{ end }}
{{ if .Values.cryostat }}
              - containerPort: 9091
                protocol: TCP
                name: jfr-jmx
{{ end }}
              - containerPort: 8787
                protocol: TCP
                name: jvmdebug
            resources:
              requests:
                cpu: "{{ .Values.cpuRequests }}"
                memory: "{{ .Values.memoryRequestsMB }}M"
              limits:
                cpu: "{{ .Values.cpuLimits }}"
                memory: "{{ .Values.memoryLimitsMB }}M"
            startupProbe:
              httpGet:
                path: /health/ready
                port: 8443
                scheme: HTTPS
              failureThreshold: 600
              initialDelaySeconds: 10
              periodSeconds: 2
            readinessProbe:
              httpGet:
                path: /health/ready
                port: 8443
                scheme: HTTPS
              failureThreshold: 10
              periodSeconds: 10
            livenessProbe:
              httpGet:
                path: /health/live
                port: 8443
                scheme: HTTPS
              failureThreshold: 10
              periodSeconds: 10
            volumeMounts:
              - name: keycloak-providers
                mountPath: /opt/keycloak/providers
                readOnly: true
{{ if .Values.otel }}
              - name: otel
                mountPath: /otel
                readOnly: true
{{ end }}
{{ if eq .Values.database "cockroach-operator" }}
              - name: client-certs
                mountPath: /cockroach/cockroach-certs
{{ end }}
        volumes:
          - name: keycloak-providers
            configMap:
              name: keycloak-providers
{{ if .Values.otel }}
          - name: otel
            persistentVolumeClaim:
              claimName: otel
{{ end }}
{{ if eq .Values.database "cockroach-operator" }}
          - name: client-certs
            projected:
              sources:
                - secret:
                    name: cockroach-node
                    items:
                      - key: ca.crt
                        path: ca.crt
                - secret:
                    name: cockroach-root-jdbc
                    items:
                      - key: tls.crt
                        path: client.root.crt
                      - key: tls.pk8
                        path: client.root.key
{{ end }}
