# There are several callouts in this YAML marked with `# <1>' etc. See 'running/keycloak-deployment.adoc` for the details.
# tag::keycloak[]
# tag::keycloak-ispn[]
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: keycloak
  name: keycloak
  namespace: {{ .Values.namespace }}
spec:
# end::keycloak-ispn[]
  hostname:
    {{- if .Values.keycloakHostname }}
    hostname: {{ .Values.keycloakHostname }}
    {{- else }}
    hostname: keycloak-{{ .Values.namespace }}.{{ .Values.hostname }}
    {{- end }}
  db:
{{ if or (eq .Values.database "aurora-postgres") (eq .Values.database "postgres") (eq .Values.database "postgres+infinispan") }}
    vendor: postgres
    url: jdbc:postgresql://postgres:5432/keycloak
{{ else if eq .Values.database "cockroach-single" }}
    vendor: postgres
    url: jdbc:postgresql://cockroach:26257/keycloak?sslmode=disable
{{ else if eq .Values.database "cockroach-operator" }}
    vendor: postgres
    url: jdbc:postgresql://cockroach-public:26257/keycloak?sslcert=%2Fcockroach%2Fcockroach-certs%2Fclient.root.crt&sslkey=%2Fcockroach%2Fcockroach-certs%2Fclient.root.key&sslmode=verify-full&sslrootcert=%2Fcockroach%2Fcockroach-certs%2Fca.crt&user=root
{{ end }}
    poolMinSize: {{ .Values.dbPoolMinSize }} # <1>
    poolInitialSize: {{ .Values.dbPoolInitialSize }}
    poolMaxSize: {{ .Values.dbPoolMaxSize }}
    usernameSecret:
      name: keycloak-db-secret
      key: username
    passwordSecret:
      name: keycloak-db-secret
      key: password
{{ if .Values.disableIngressStickySession }}
  ingress:
    enabled: true
    annotations:
      # When running load tests, disable sticky sessions on the OpenShift HAProxy router
      # to avoid receiving all requests on a single Keycloak Pod.
      haproxy.router.openshift.io/balance: roundrobin
      haproxy.router.openshift.io/disable_cookies: 'true'
{{end}}
  # tag::keycloak-ispn[]
  additionalOptions:
{{- if .Values.infinispan.customConfig }}
    - name: cache-config-file # <1>
      value: {{ base .Values.infinispan.configFile }}
  # end::keycloak-ispn[]
{{- end }}
{{ if or (eq .Values.database "infinispan") (eq .Values.database "postgres+infinispan") }}
    - name: storage-hotrod-host
      value: infinispan
    - name: storage-hotrod-port
      value: '11222'
    - name: storage-hotrod-username
      value: admin
    - name: storage-hotrod-password
      value: admin
{{ end }}
{{ if .Values.disableCaches }}
    - name: cache-realm-enabled
      value: 'false'
    - name: cache-user-enabled
      value: 'false'
    - name: cache-authorization-enabled
      value: 'false'
    - name: spi-public-key-cache-infinispan-enabled
      value: 'false'
{{ end }}
{{ if eq .Values.storage "jpa+hotrod" }}
    # in the mixed setup we set storage to jpa and override user sessions, auth sessions, single-use objects, and login failures to use hotrod
    - name: storage
      value: jpa
    - name: storage-area-auth-session
      value: hotrod
    - name: storage-area-user-session
      value: hotrod
    - name: storage-area-single-use-object
      value: hotrod
    - name: storage-area-login-failure
      value: hotrod
{{ else if ne .Values.storage "" }}
    - name: storage
      value: {{ quote .Values.storage }}
    # this might eventually be set automatically by the operator
    # TODO: value should be stored as a secret instead in a production environment
    # https://github.com/keycloak/keycloak/issues/13377
    - name: storage-deployment-state-version-seed
      value: some-secret-seed
{{ end }}
    - name: log-console-output
      value: json
    - name: metrics-enabled # <2>
      value: 'true'
{{- if .Values.infinispan.remoteStore.enabled }}
    # tag::keycloak-ispn[]
    - name: remote-store-host # <2>
      value: {{ quote .Values.infinispan.remoteStore.host }}
    - name: remote-store-port # <2>
      value: {{ quote .Values.infinispan.remoteStore.port }}
    - name: remote-store-username # <3>
      secret:
        name: remote-store-secret
        key: username
    - name: remote-store-password # <3>
      secret:
        name: remote-store-secret
        key: password
    # end::keycloak-ispn[]
{{- end }}
  http:
    tlsSecret: keycloak-tls-secret
  instances: {{ .Values.instances }}
  # tag::keycloak-ispn[]
  unsupported:
    podTemplate:
      # end::keycloak[]
      # end::keycloak-ispn[]
      metadata:
        annotations:
          checksum/config: {{ include (print $.Template.BasePath "/keycloak-providers-configmap.yaml") . | sha256sum }}-{{ include (print $.Template.BasePath "/postgres/postgres-deployment.yaml") . | sha256sum }}-{{ .Values.keycloakImage }}-{{ include (print $.Template.BasePath "/keycloak-infinispan-configmap.yaml") . | sha256sum }}-{{ .Values.otelVersion }}
      # tag::keycloak[]
      # tag::keycloak-ispn[]
      spec:
      # end::keycloak-ispn[]
        {{ if .Values.otel }}
        initContainers:
          - name: download-otel
            image: registry.access.redhat.com/ubi8/ubi-minimal
            command:
              - /bin/bash
            args:
              - -c
              # language=bash
              - |
                if [ ! -e /otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar ]; then
                  curl -f -L https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/{{ .Values.otelVersion }}/opentelemetry-javaagent.jar -o /otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar
                fi
            volumeMounts:
              - name: otel
                mountPath: /otel
        {{ end }}
        # tag::keycloak-ispn[]
        containers:
          -
{{ if hasPrefix "localhost/" .Values.keycloakImage }}
            imagePullPolicy: Never
{{ end }}
            env:
        # end::keycloak-ispn[]
              - name: 'QUARKUS_THREAD_POOL_MAX_THREADS' # <3>
                value: {{ div 200 .Values.instances | quote }}
              - name: 'QUARKUS_THREAD_POOL_QUEUE_SIZE' # <4>
                value: '1000'
              # end::keycloak[]
              # We want to have an externally provided username and password, therefore, we override those two environment variables
              - name: KEYCLOAK_ADMIN
                valueFrom:
                  secretKeyRef:
                    name: keycloak-preconfigured-admin
                    key: username
                    optional: false
              - name: KEYCLOAK_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: keycloak-preconfigured-admin
                    key: password
                    optional: false
                # tag::keycloak[]
{{ if .Values.otel }}
              # Instrumentation for the HTTP/2 protocol doesn't work yet - no metrics will be available, probably also no tracing
              # As a workaround, force downgrade to HTTP/1.1
              # https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/8927
              - name: QUARKUS_HTTP_HTTP2
                value: 'false'
              - name: OTEL_SEMCONV_STABILITY_OPT_IN
                value: 'http'
              # https://github.com/open-telemetry/opentelemetry-java-instrumentation
              # https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md
              - name: OTEL_RESOURCE_ATTRIBUTES
                value: service.name=keycloak
              - name: OTEL_TRACES_EXPORTER
                # with otel+tempo 1.4.1 forwarding of traces works, but searching is not returning all values for now, for example delete users was missing
                value: jaeger
              - name: OTEL_EXPORTER_JAEGER_ENDPOINT
                value: http://jaeger-collector.monitoring.svc:14250
              - name: OTEL_TRACES_SAMPLER
                value: parentbased_traceidratio # always_on, parentbased_traceidratio, ...
              - name: OTEL_TRACES_SAMPLER_ARG
                value: {{ .Values.otelSamplingPercentage | quote }}
              - name: OTEL_METRICS_EXPORTER
                value: prometheus
{{ end }}
{{ if eq .Values.storage "jpa" }}
              # avoid a warning when this is not set, see https://github.com/keycloak/keycloak/issues/16616
              - name: KC_SPI_MAP_STORAGE_JPA_LOCK_TIMEOUT
                value: "10000"
{{ end }}
              # tag::keycloak-ispn[]
              - name: JAVA_OPTS_APPEND # <5>
                value: >
{{- if not (eq (int .Values.heapInitMB) 64) }}
                  -Xms{{ .Values.heapInitMB }}m
{{- end }}
{{- if not (eq (int .Values.heapMaxMB) 512) }}
                  -Xmx{{ .Values.heapMaxMB }}m
{{- end }}
{{- if not (eq (int .Values.metaspaceInitMB) 96) }}
                  -XX:MetaspaceSize={{ .Values.metaspaceInitMB }}m
{{- end }}
{{- if not (eq (int .Values.metaspaceMaxMB) 256) }}
                  -XX:MaxMetaspaceSize={{ .Values.metaspaceMaxMB }}m
{{- end }}
                  -Djgroups.thread_dumps_threshold=1
{{- if .Values.jvmDebug }}
                  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8787
{{- end }}
{{- if .Values.otel }}
                  -javaagent:/otel/opentelemetry-javaagent-{{ .Values.otelVersion }}.jar
{{- end }}
{{- if .Values.cryostat }}
                  -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
{{- end }}
{{- if .Values.infinispan.site }}
                  -Djboss.site.name={{.Values.infinispan.site}}
{{- end }}
# end::keycloak[]
# end::keycloak-ispn[]
            ports:
{{ if .Values.otel }}
              - containerPort: 9464
                protocol: TCP
                name: otel-prometheus
{{ end }}
{{ if .Values.cryostat }}
              - containerPort: 9091
                protocol: TCP
                name: jfr-jmx
{{ end }}
{{ if .Values.jvmDebug }}
              - containerPort: 8787
                protocol: TCP
                name: jvm-debug
{{ end }}
# tag::keycloak[]
            resources:
              requests:
                {{ if .Values.cpuRequests }}cpu: "{{ .Values.cpuRequests }}"{{end}}
                {{ if .Values.memoryRequestsMB }}memory: "{{ .Values.memoryRequestsMB }}M"{{end}}
              limits:
                {{ if .Values.cpuLimits }}cpu: "{{ .Values.cpuLimits }}"{{end}}
                {{ if .Values.memoryLimitsMB }}memory: "{{ .Values.memoryLimitsMB }}M"{{end}}
            readinessProbe: # <6>
              exec:
                command:
                  - 'true'
            livenessProbe: # <6>
              exec:
                command:
                  - 'true'
            # end::keycloak[]
            # tag::keycloak-ispn[]
            volumeMounts:
{{ if .Values.infinispan.customConfig }}
              - name: kcb-infinispan-cache-config # <4>
                mountPath: /opt/keycloak/conf/{{ base .Values.infinispan.configFile }}
                subPath: {{ base .Values.infinispan.configFile }}
                readOnly: true
                # end::keycloak-ispn[]
{{ end }}
              - name: keycloak-providers
                mountPath: /opt/keycloak/providers
                readOnly: true
{{ if .Values.otel }}
              - name: otel
                mountPath: /otel
                readOnly: true
{{ end }}
{{ if eq .Values.database "cockroach-operator" }}
              - name: client-certs
                mountPath: /cockroach/cockroach-certs
{{ end }}
        # tag::keycloak-ispn[]
        volumes:
{{ if .Values.infinispan.customConfig }}
          - name: kcb-infinispan-cache-config # <6>
            configMap:
              name: kcb-infinispan-cache-config
              items:
                - key: {{base .Values.infinispan.configFile}}
                  path: {{base .Values.infinispan.configFile}}
            # end::keycloak-ispn[]
{{ end }}
          - name: keycloak-providers
            configMap:
              name: keycloak-providers
{{ if .Values.otel }}
          - name: otel
            persistentVolumeClaim:
              claimName: otel
{{ end }}
{{ if eq .Values.database "cockroach-operator" }}
          - name: client-certs
            projected:
              sources:
                - secret:
                    name: cockroach-node
                    items:
                      - key: ca.crt
                        path: ca.crt
                - secret:
                    name: cockroach-root-jdbc
                    items:
                      - key: tls.crt
                        path: client.root.crt
                      - key: tls.pk8
                        path: client.root.key
{{ end }}
