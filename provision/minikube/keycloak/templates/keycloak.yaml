# There are several callouts in this YAML marked with `# <1>' etc. See 'running/keycloak-deployment.adoc` for the details.
# tag::keycloak[]
# tag::keycloak-ispn[]
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: keycloak
  name: keycloak
  namespace: {{ .Values.namespace }}
spec:
# end::keycloak-ispn[]
  {{- if .Values.stretchCluster }}
  # evenly spread pods between zones and nodes.
  scheduling:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: keycloak
                  app.kubernetes.io/managed-by: keycloak-operator
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: keycloak
              topologyKey: topology.kubernetes.io/zone
          - weight: 90
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: keycloak
                  app.kubernetes.io/managed-by: keycloak-operator
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: keycloak
              topologyKey: kubernetes.io/hostname
  {{- end}}
  hostname:
    {{- if .Values.keycloakHostname }}
    hostname: {{ .Values.keycloakHostname }}
    {{- else }}
    hostname: keycloak-{{ .Values.namespace }}.{{ .Values.hostname }}
    {{- end }}
  resources:
    requests:
      {{ if .Values.cpuRequests }}cpu: "{{ .Values.cpuRequests }}"{{end}}
      {{ if .Values.memoryRequestsMB }}memory: "{{ .Values.memoryRequestsMB }}M"{{end}}
    limits:
      {{ if .Values.cpuLimits }}cpu: "{{ .Values.cpuLimits }}"{{end}}
      {{ if .Values.memoryLimitsMB }}memory: "{{ .Values.memoryLimitsMB }}M"{{end}}
  db:
{{ if or (eq .Values.database "aurora-postgres") (eq .Values.database "postgres") (eq .Values.database "postgres+infinispan") }}
    vendor: postgres
{{ else if eq .Values.database "mysql" }}
    vendor: mysql
{{ end }}
{{- if .Values.useAWSJDBCWrapper}}
    url: jdbc:aws-wrapper:postgresql://{{ .Values.dbUrl }}:5432/keycloak
{{- else if eq .Values.database "mysql"}}
    url: jdbc:mysql://mysql:3306/keycloak
{{- else }}
    url: jdbc:postgresql://postgres:5432/keycloak
{{ end }}
    poolMinSize: {{ .Values.dbPoolMinSize }} # <1>
    poolInitialSize: {{ .Values.dbPoolInitialSize }}
    poolMaxSize: {{ .Values.dbPoolMaxSize }}
    usernameSecret:
      name: keycloak-db-secret
      key: username
    passwordSecret:
      name: keycloak-db-secret
      key: password
{{ if .Values.disableIngressStickySession }}
  ingress:
    enabled: true
    annotations:
      # When running load tests, disable sticky sessions on the OpenShift HAProxy router
      # to avoid receiving all requests on a single Keycloak Pod.
      haproxy.router.openshift.io/balance: roundrobin
      haproxy.router.openshift.io/disable_cookies: 'true'
{{end}}
  {{ if .Values.otel }}
  tracing:
    enabled: true
    endpoint: {{ .Values.tracingEndpoint }}
    samplerRatio: {{ .Values.otelSamplingPercentage }}
    samplerType: "parentbased_traceidratio"
  {{- end }}
{{ if .Values.keycloakImage }}
  image: {{ .Values.keycloakImage }} # <2>
  startOptimized: {{ .Values.startOptimized }} # <2>
{{ end }}
  features:
    enabled:
{{- if .Values.multiSite }}
      - multi-site # <3>
{{- end }}
{{- if .Values.externalInfinispan }}
      - clusterless
{{- end }}
{{ if .Values.otel }}
      - opentelemetry
{{- end }}
{{- if .Values.externalInfinispan }}
    disabled:
      - persistent-user-sessions
{{- end }}

{{- if .Values.infinispan.customConfig }}
  # tag::keycloak-ispn[]
  cache:
    configMapFile:
        name: kcb-infinispan-cache-config # <1>
        key: {{ base .Values.infinispan.configFile }} # <1>
  # end::keycloak-ispn[]
{{- end }}
  # tag::keycloak-ispn[]
  additionalOptions:
  # end::keycloak-ispn[]
    # end::keycloak[]
    - name: http-metrics-histograms-enabled
      value: 'true'
    - name: http-metrics-slos
      value: '5,10,25,50,250,500'
    # tag::keycloak[]
{{- if or (eq .Values.database "infinispan") (eq .Values.database "postgres+infinispan") }}
    - name: storage-hotrod-host
      value: infinispan
    - name: storage-hotrod-port
      value: '11222'
    - name: storage-hotrod-username
      value: admin
    - name: storage-hotrod-password
      value: admin
{{ end }}
    # end::keycloak[]
    # tag::keycloak-queue-size[]
    - name: http-max-queued-requests
      value: "1000"
    # end::keycloak-queue-size[]
    # tag::keycloak[]
    - name: log-console-output
      value: json
    - name: metrics-enabled # <4>
      value: 'true'
    - name: event-metrics-user-enabled
      value: 'true'
{{- if .Values.infinispan.remoteStore.enabled }}
    # tag::keycloak-ispn[]
    - name: cache-remote-host # <1>
      value: {{ quote .Values.infinispan.remoteStore.host }}
    - name: cache-remote-port # <2>
      value: {{ quote .Values.infinispan.remoteStore.port }}
    - name: cache-remote-username # <3>
      secret:
        name: remote-store-secret
        key: username
    - name: cache-remote-password # <4>
      secret:
        name: remote-store-secret
        key: password
    # end::keycloak-ispn[]
{{- end }}
{{- if .Values.keycloakDocumentation }}
    # end::keycloak[]
    # This block is just for documentation purposes as we need both versions of Infinispan config, with and without numbers to corresponding options
    # tag::keycloak[]
    - name: cache-remote-host
      value: {{ quote .Values.infinispan.remoteStore.host }}
    - name: cache-remote-port
      value: {{ quote .Values.infinispan.remoteStore.port }}
    - name: cache-remote-username
      secret:
        name: remote-store-secret
        key: username
    - name: cache-remote-password
      secret:
        name: remote-store-secret
        key: password
{{- end }}
{{ if .Values.useAWSJDBCWrapper }}
    - name: db-driver
      value: software.amazon.jdbc.Driver
{{ end }}
  http:
    tlsSecret: keycloak-tls-secret
  instances: {{ .Values.instances }}
  # end::keycloak[]
  unsupported:
    podTemplate:
      metadata:
        annotations:
          checksum/config: {{ include (print $.Template.BasePath "/keycloak-providers-configmap.yaml") . | sha256sum }}-{{ include (print $.Template.BasePath "/postgres/postgres-deployment.yaml") . | sha256sum }}-{{ .Values.keycloakImage }}-{{ include (print $.Template.BasePath "/keycloak-infinispan-configmap.yaml") . | sha256sum }}
      spec:
        containers:
          -
{{ if hasPrefix "localhost/" .Values.keycloakImage }}
            imagePullPolicy: Never
{{ end }}
            env:
              # We want to have an externally provided username and password, therefore, we override those two environment variables
              - name: KC_BOOTSTRAP_ADMIN_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: keycloak-preconfigured-admin
                    key: username
                    optional: false
              - name: KC_BOOTSTRAP_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: keycloak-preconfigured-admin
                    key: password
                    optional: false
              - name: JAVA_OPTS_APPEND
                value: >
                  -Djdk.tracePinnedThreads=full
{{- if not (eq (int .Values.metaspaceInitMB) 96) }}
                  -XX:MetaspaceSize={{ .Values.metaspaceInitMB }}m
{{- end }}
{{- if not (eq (int .Values.metaspaceMaxMB) 256) }}
                  -XX:MaxMetaspaceSize={{ .Values.metaspaceMaxMB }}m
{{- end }}
{{- if .Values.jvmDebug }}
                  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8787
{{- end }}
{{- if .Values.cryostat }}
                  -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
{{- end }}
            ports:
{{ if .Values.cryostat }}
              - containerPort: 9091
                protocol: TCP
                name: jfr-jmx
{{ end }}
{{ if .Values.jvmDebug }}
              - containerPort: 8787
                protocol: TCP
                name: jvm-debug
{{ end }}
            # readinessProbe:
            #   exec:
            #     command:
            #       - 'true'
            # livenessProbe:
            #   exec:
            #     command:
            #       - 'true'
            volumeMounts:
              {{- range $path, $size := .Files.Glob "providers/**" }}
              {{- $name := base $path }}
              - name: keycloak-providers
                mountPath: /opt/keycloak/providers/{{ $name }}
                subPath: {{ $name }}
                readOnly: true
              {{- end -}}
{{ if .Values.infinispan.jgroupsTls }}
              - name: cache-embedded-mtls-volume
                mountPath: /etc/cache-embedded-mtls
                readOnly: true
{{ end }}
        volumes:
          - name: keycloak-providers
            configMap:
              name: keycloak-providers
