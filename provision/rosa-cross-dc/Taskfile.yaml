# https://taskfile.dev

version: '3'

output: prefixed

vars:
  # To compute Infinispan namespace
  KC_NAMESPACE_PREFIX: '{{default "$(whoami)-" .KC_NAMESPACE_PREFIX}}'
  KC_ISPN_NAMESPACE: '{{.KC_NAMESPACE_PREFIX}}keycloak'
  ISPN_DIR: "{{.ROOT_DIR}}/../infinispan"
  ACCELERATOR_DIR: "{{.ROOT_DIR}}/../aws/global-accelerator"
  ROUTE53_DIR: "{{.ROOT_DIR}}/../aws/route53"
  RDS_DIR: "{{.ROOT_DIR}}/../aws/rds"
  KC_DIR: "{{.ROOT_DIR}}/../openshift"
  ANSIBLE_DIR: "{{.ROOT_DIR}}/../../ansible"
  PYTHON_DIR: "{{.ROOT_DIR}}/../../benchmark/src/main/python"
  BENCHMARK_DIR: "{{.ROOT_DIR}}/../../benchmark/src/main/content/bin"
  ENV_DATA_JSON_PATH: "{{.ROOT_DIR}}/../environment_data.json"
  KEYCLOAK_MASTER_PASSWORD:
    sh: aws secretsmanager get-secret-value --region eu-central-1 --secret-id keycloak-master-password --query SecretString --output text --no-cli-pager
  KC_JGROUPS_TLS: '{{default "true" .KC_JGROUPS_TLS}}'

dotenv: [ '.env' ]

includes:
  common:
    taskfile: ../common
    internal: true
  ispn:
    taskfile: ../infinispan/Utils.yaml
    dir: ../infinispan/
    internal: true
  chaos:
    taskfile: ./Chaos.yaml
  keycloak:
    taskfile: ../keycloak-tasks/Utils.yaml
    dir: ../keycloak-tasks/
    internal: true

tasks:
  fetch-rosa-region:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    cmd: rosa describe cluster -c {{ .ROSA_CLUSTER_NAME }} -o json | jq -r .region.id > .task/rosa-region-{{.ROSA_CLUSTER_NAME}}
    generates:
      - .task/rosa-region-{{.ROSA_CLUSTER_NAME}}

  create-aurora:
    cmds:
      - task: create-{{ ternary "global" "single" (eq .CROSS_DC_MODE "ASYNC") }}-aurora

  create-single-aurora:
    internal: true
    desc: "Creates a single region Aurora Database"
    requires:
      vars:
        - AURORA_CLUSTER
    env:
      AURORA_CLUSTER: "{{.AURORA_CLUSTER}}"
    vars:
      AURORA_REGION: "$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_1}})"
    cmds:
      - task: fetch-rosa-region
        vars:
            ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - echo "Deploying Aurora Database ({{.AURORA_CLUSTER}}) in region $(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_1}})"
      - AURORA_REGION="{{ .AURORA_REGION }}" AURORA_INSTANCES=2 ../aws/rds/aurora_create.sh
      - task: update-env-configjson-with-new-values
        vars:
          PROP_NAME: "databaseMode"
          PROP_VALUE: "single"

  create-global-aurora:
    internal: true
    desc: "Creates a Global Aurora Database"
    requires:
      vars:
        - AURORA_CLUSTER
    env:
      AURORA_GLOBAL_CLUSTER: "{{.AURORA_CLUSTER}}"
      AURORA_INSTANCES: "{{default .AURORA_INSTANCES 1}}"
    vars:
      AURORA_GLOBAL_REGIONS: "$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_1}}) $(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_2}})"
    cmds:
      - task: fetch-rosa-region
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: fetch-rosa-region
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - echo "Deploying Global Aurora Database ({{.AURORA_GLOBAL_CLUSTER}}) in regions {{.AURORA_GLOBAL_REGIONS}}"
      - AURORA_GLOBAL_REGIONS="{{ .AURORA_GLOBAL_REGIONS }}" ../aws/rds/aurora_create_global_db.sh
      - task: update-env-configjson-with-new-values
        vars:
          PROP_NAME: "databaseMode"
          PROP_VALUE: "global"

  delete-aurora:
    desc: "Deletes Aurora Database"
    requires:
      vars:
        - AURORA_CLUSTER
    cmds:
      - task: delete-{{ ternary "global" "single" (eq .CROSS_DC_MODE "ASYNC") }}-aurora

  delete-global-aurora:
    internal: true
    desc: "Deletes Global Aurora Database"
    requires:
      vars:
        - AURORA_CLUSTER
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
    cmds:
      - task: delete-global-peering-connection
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-global-peering-connection
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - cmd: AURORA_GLOBAL_CLUSTER="{{ .AURORA_CLUSTER }}" ../aws/rds/aurora_delete_global_db.sh

  delete-single-aurora:
    internal: true
    desc: "Deletes Single Aurora Database"
    requires:
      vars:
        - AURORA_CLUSTER
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
    cmds:
      - task: fetch-rosa-region
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-single-peering-connection
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-single-peering-connection
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - cmd: AURORA_CLUSTER="{{ .AURORA_CLUSTER }}" AURORA_REGION="$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_1}})" ../aws/rds/aurora_delete.sh

  create-single-peering-connection:
    internal: true
    desc: "Creates Aurora Peering Connection"
    silent: false
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - AURORA_CLUSTER
    vars:
      AURORA_REGION: "$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME}})"
    cmds:
      - task: fetch-rosa-region
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME}}"
      - cmd: CLUSTER_NAME="{{.ROSA_CLUSTER_NAME}}" AURORA_REGION="{{ .AURORA_REGION }}" KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" SKIP_ROSA_LOGIN=true {{.RDS_DIR}}/aurora_create_peering_connection.sh
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  create-global-peering-connection:
    internal: true
    desc: "Creates Global Aurora Peering Connections"
    silent: false
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - AURORA_CLUSTER
    cmd: CLUSTER_NAME="{{.ROSA_CLUSTER_NAME}}" AURORA_GLOBAL_CLUSTER="{{.AURORA_CLUSTER}}" KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" SKIP_ROSA_LOGIN=true {{.RDS_DIR}}/aurora_create_global_peering_connections.sh
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  delete-single-peering-connection:
    internal: true
    desc: "Deletes Aurora Peering Connection"
    silent: false
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - AURORA_CLUSTER
    vars:
      AURORA_REGION: "$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME}})"
    cmds:
      - task: fetch-rosa-region
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME}}"
      - cmd: CLUSTER_NAME="{{.ROSA_CLUSTER_NAME}}" AURORA_CLUSTER="{{ .AURORA_CLUSTER }}" AURORA_REGION="{{ .AURORA_REGION }}" KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" SKIP_ROSA_LOGIN=true {{.RDS_DIR}}/aurora_delete_peering_connection.sh
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  delete-global-peering-connection:
    internal: true
    desc: "Deletes Global Aurora Peering Connections"
    silent: false
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - AURORA_CLUSTER
    cmd: CLUSTER_NAME="{{.ROSA_CLUSTER_NAME}}" AURORA_GLOBAL_CLUSTER="{{.AURORA_CLUSTER}}" KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" SKIP_ROSA_LOGIN=true {{.RDS_DIR}}/aurora_delete_global_peering_connections.sh
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  fetch-single-aurora-endpoint:
    internal: true
    requires:
      vars:
        - AURORA_CLUSTER
        - ROSA_CLUSTER_NAME_1
    vars:
      AURORA_REGION: "$(cat .task/rosa-region-{{.ROSA_CLUSTER_NAME_1}})"
    cmd: AURORA_REGION={{.AURORA_REGION}} ../aws/rds/aurora_endpoint.sh > .task/aurora-endpoint-{{.AURORA_CLUSTER}}
    generates:
      - .task/aurora-endpoint-{{.AURORA_CLUSTER}}

  fetch-global-aurora-endpoint:
    internal: true
    vars:
      ROOT_DOMAIN: '{{default "keycloak-benchmark.com" .ROOT_DOMAIN}}'
    requires:
      vars:
        - AURORA_CLUSTER
    cmd: echo "{{ .AURORA_CLUSTER }}.aurora-global.{{ .ROOT_DOMAIN }}" > .task/aurora-endpoint-{{.AURORA_CLUSTER}}
    generates:
      - .task/aurora-endpoint-{{.AURORA_CLUSTER}}

  deploy-infinispan-crossdc:
    desc: "Deploys Infinispan in both ROSA clusters"
    internal: true
    cmds:
      - echo "Deploying Infinispan cluster with cross-site in ROSA clusters {{.ROSA_CLUSTER_NAME_1}} and {{.ROSA_CLUSTER_NAME_2}} (namespace={{.KC_ISPN_NAMESPACE}})"
      - task: ispn:crossdc
        vars:
          OC_NAMESPACE_1: "{{.KC_ISPN_NAMESPACE}}"
          OC_NAMESPACE_2: "{{.KC_ISPN_NAMESPACE}}"
          CROSS_DC_HOT_ROD_PASSWORD: "{{.RS_HOT_ROD_PASSWORD | default .KEYCLOAK_MASTER_PASSWORD}}"
      - task: update-env-configjson-with-ispn-data
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: update-env-configjson-with-ispn-data
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  uninstall-infinispan:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - KC_ISPN_NAMESPACE
    cmd: KUBECONFIG={{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}} helm uninstall --namespace {{.KC_ISPN_NAMESPACE}} infinispan || true
    status:
      - test -z "$(KUBECONFIG={{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}} helm list --namespace {{.KC_ISPN_NAMESPACE}} --filter infinispan -q)"
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  deploy-keycloak:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - KC_HOSTNAME_OVERRIDE
    cmds:
      - task: create-{{ ternary "global" "single" (eq .CROSS_DC_MODE "ASYNC") }}-peering-connection
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME}}"
      - task: keycloak:install-keycloak
        vars:
          NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
          KUBECONFIG: "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
          KC_HOSTNAME_OVERRIDE: "{{.KC_HOSTNAME_OVERRIDE}}"
          KC_HEALTH_HOSTNAME: "{{.KC_HEALTH_HOSTNAME}}"
          KC_HOSTNAME_SUFFIX:
            sh: cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}
          KC_DATABASE_URL:
            sh: cat .task/aurora-endpoint-{{.AURORA_CLUSTER}}
          KC_ADMIN_PASSWORD:
            sh: "aws secretsmanager get-secret-value --region eu-central-1 --secret-id keycloak-master-password --query SecretString --output text --no-cli-pager || echo admin"
          KC_DATABASE: "aurora-postgres"
          KC_CUSTOM_INFINISPAN_CONFIG: "false"
          KC_ISPN_CLUSTER: "infinispan"
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME}}"

  wait-keycloak:
    desc: "Waits for Keycloak conditions"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - KC_NAMESPACE_PREFIX
    vars:
      NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      TIMEOUT: "{{.TIMEOUT | default 1200}}"
    cmds:
      - echo "Waiting for Keycloak condition in ROSA cluster {{.ROSA_CLUSTER_NAME}} for {{.TIMEOUT}} seconds"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=Available --timeout={{.TIMEOUT}}s deployments.apps/keycloak-operator -n "{{.NAMESPACE}}"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=Ready --timeout={{.TIMEOUT}}s keycloaks.k8s.keycloak.org/keycloak -n "{{.NAMESPACE}}"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=RollingUpdate=False --timeout={{.TIMEOUT}}s keycloaks.k8s.keycloak.org/keycloak -n "{{.NAMESPACE}}"
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  wait-cryostat:
    desc: "Waits for Cryostat conditions"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - KC_NAMESPACE_PREFIX
    vars:
      NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      TIMEOUT: "{{.TIMEOUT | default 1200}}"
    cmds:
      - echo "Waiting for Cryostat condition in ROSA cluster {{.ROSA_CLUSTER_NAME}} for {{.TIMEOUT}} seconds"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=MainDeploymentProgressing --timeout={{.TIMEOUT}}s cryostats.operator.cryostat.io/cryostat -n "{{.NAMESPACE}}"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=MainDeploymentAvailable --timeout={{.TIMEOUT}}s cryostats.operator.cryostat.io/cryostat -n "{{.NAMESPACE}}"
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for=condition=TLSSetupComplete --timeout={{.TIMEOUT}}s cryostats.operator.cryostat.io/cryostat -n "{{.NAMESPACE}}"
    preconditions:
      - test -f {{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}

  active-active:
    desc: "Deploys Infinispan, Aurora DB and Keycloak in a Active/Active deployment using ROSA clusters"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - AURORA_CLUSTER
        - ACCELERATOR_DNS
        - ACCELERATOR_WEBHOOK_URL
        - ACCELERATOR_WEBHOOK_USERNAME
        - ACCELERATOR_WEBHOOK_PASSWORD
    cmds:
      - task: common:datasetprovider
      - task: create-aurora
      # Using the CROSS_DC_MODE value to determine which aurora task to run, ASYNC --> global, SYNC --> single
      # We expect to use ASYNC mode only in a cross region, cross site deployment and SYNC in a single region multi-az deployment.
      - task: fetch-{{ ternary "global" "single" (eq .CROSS_DC_MODE "ASYNC") }}-aurora-endpoint
      - task: deploy-infinispan-crossdc
        vars:
          OC_NAMESPACE_1: "{{.KC_ISPN_NAMESPACE}}"
          OC_NAMESPACE_2: "{{.KC_ISPN_NAMESPACE}}"
      - task: deploy-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          KC_HOSTNAME_OVERRIDE: "{{.ACCELERATOR_DNS}}"
      - task: deploy-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          KC_HOSTNAME_OVERRIDE: "{{.ACCELERATOR_DNS}}"
      - task: wait-cryostat
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: wait-cryostat
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: wait-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: wait-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: create-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: create-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  default:
    desc: "Deploys Infinispan, Aurora DB and Keycloak in a Active/Passive deployment using ROSA clusters"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - AURORA_CLUSTER
        - KC_HEALTH_URL_CLUSTER_1
        - KC_HEALTH_URL_CLUSTER_2
    cmds:
      - task: common:datasetprovider
      - task: create-aurora
      # Using the CROSS_DC_MODE value to determine which aurora task to run, ASYNC --> global, SYNC --> single
      # We expect to use ASYNC mode only in a cross region, cross site deployment and SYNC in a single region multi-az deployment.
      - task: fetch-{{ ternary "global" "single" (eq .CROSS_DC_MODE "ASYNC") }}-aurora-endpoint
      - task: deploy-infinispan-crossdc
        vars:
          OC_NAMESPACE_1: "{{.KC_ISPN_NAMESPACE}}"
          OC_NAMESPACE_2: "{{.KC_ISPN_NAMESPACE}}"
      - task: deploy-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          KC_HOSTNAME_OVERRIDE: "{{.KC_CLIENT_URL}}"
          KC_HEALTH_HOSTNAME: "{{.KC_HEALTH_URL_CLUSTER_1}}"
      - task: deploy-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          KC_HOSTNAME_OVERRIDE: "{{.KC_CLIENT_URL}}"
          KC_HEALTH_HOSTNAME: "{{.KC_HEALTH_URL_CLUSTER_2}}"
      - task: deploy-route53-failover-lambda
        vars:
          KC_HEALTH_HOSTNAME: "{{.KC_HEALTH_URL_CLUSTER_1}}"
      - task: wait-cryostat
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: wait-cryostat
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: wait-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: wait-keycloak
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: create-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: create-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  undeploy:
    desc: "Undeploy Infinispan and Keycloak in a Active/Passive deployment"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - KC_HEALTH_URL_CLUSTER_1
    cmds:
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: keycloak:uninstall-keycloak
        vars:
          KUBECONFIG: "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      - task: keycloak:uninstall-keycloak
        vars:
          KUBECONFIG: "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      - task: uninstall-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: uninstall-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: undeploy-route53-failover-lambda
      - task: route53-failback
        vars:
          WAIT: 0
      - task: delete-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  undeploy-active-active:
    desc: "Undeploy Infinispan and Keycloak in a Active/Active deployment"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
    cmds:
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: keycloak:uninstall-keycloak
        vars:
          KUBECONFIG: "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      - task: keycloak:uninstall-keycloak
        vars:
          KUBECONFIG: "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.KC_NAMESPACE_PREFIX}}keycloak"
      - task: uninstall-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: uninstall-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: delete-env-configmap
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  helm-add-repos:
    internal: true
    cmds:
      - helm repo add grafana https://grafana.github.io/helm-charts
      - helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
      - helm repo update

  create-grafana-service-account:
    label: "create-grafana-service-account-{{.ROSA_CLUSTER_NAME}}"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    vars:
      NAMESPACE: '{{.NAMESPACE | default "monitoring"}}'
      SERVICE_ACCOUNT: '{{.SERVICE_ACCOUNT | default "grafana"}}'
    cmds:
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc create sa -n "{{.NAMESPACE}}" "{{.SERVICE_ACCOUNT}}" || true
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc adm policy add-cluster-role-to-user cluster-monitoring-view -z "{{.SERVICE_ACCOUNT}}" -n "{{.NAMESPACE}}"
      - mkdir -p .task/monitoring
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get project/monitoring -o jsonpath='{.metadata.annotations.openshift\.io/sa\.scc\.uid-range}' |  cut -f1 -d"/" > .task/monitoring-uids-{{.ROSA_CLUSTER_NAME}}
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc apply -f {{.KC_DIR}}/grafana-sa-secret.yaml -n "{{.NAMESPACE}}"
    generates:
      - .task/monitoring-uids-{{.ROSA_CLUSTER_NAME}}
    status:
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get sa -n "{{.NAMESPACE}}" "{{.SERVICE_ACCOUNT}}"
      - test -f .task/monitoring-uids-{{.ROSA_CLUSTER_NAME}}
    sources:
      - "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
      - "{{.KC_DIR}}/grafana-sa-secret.yaml"

  install-grafana:
    label: "install-grafana-{{.ROSA_CLUSTER_NAME}}"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    vars:
      GRAFANA_VERSION: '{{.GRAFANA_VERSION | default "6.55.0"}}'
      MONITORING_UIDS:
        sh: "cat {{.ROOT_DIR}}/.task/monitoring-uids-{{.ROSA_CLUSTER_NAME}}"
      GRAFANA_PASSWORD:
        sh: "aws secretsmanager get-secret-value --region eu-central-1 --secret-id keycloak-master-password --query SecretString --output text --no-cli-pager || echo admin"
      GRAFANA_DOMAIN:
        sh: "cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}"
    cmds:
      - >
        KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        helm -n monitoring upgrade --install grafana grafana/grafana --version {{.GRAFANA_VERSION}} -f "{{.KC_DIR}}/grafana.yaml"
        --set ingress.hosts[0]="grafana.{{.GRAFANA_DOMAIN}}"
        --set ingress.annotations."route\.openshift\.io/termination"=edge
        --set ingress.annotations."route\.openshift\.io/insecureEdgeTerminationPolicy"=Redirect
        --set securityContext.runAsUser="{{.MONITORING_UIDS}}"
        --set securityContext.runAsGroup="{{.MONITORING_UIDS}}"
        --set securityContext.fsGroup="{{.MONITORING_UIDS}}"
        --set adminPassword="{{.GRAFANA_PASSWORD}}"
    sources:
      - "{{.ROOT_DIR}}/.task/monitoring-uids-{{.ROSA_CLUSTER_NAME}}"
      - "{{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}"
      - "{{.KC_DIR}}/grafana.yaml"
      - "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  install-jaeger:
    label: "install-jaeger-{{.ROSA_CLUSTER_NAME}}"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    vars:
      RETENTION: '{{.RETENTION | default "168h"}}'
      JAEGER_VERSION: '{{.JAEGER_VERSION | default "0.58.0"}}'
    env:
      KB_RETENTION: '{{.RETENTION}}'
    cmds:
      - >
        KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        helm upgrade --install jaeger jaegertracing/jaeger --version {{.JAEGER_VERSION}} -n monitoring -f "{{.ROOT_DIR}}/../minikube/jaeger/values.yaml"
      - envsubst < "{{.ROOT_DIR}}/../minikube/jaeger/deployment-patch.yaml" > .task/jaeger-{{.ROSA_CLUSTER_NAME}}-patchfile.yaml
      - >
        KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        oc patch deployment jaeger -n monitoring --patch-file .task/jaeger-{{.ROSA_CLUSTER_NAME}}-patchfile.yaml
    sources:
      - "{{.ROOT_DIR}}/../minikube/jaeger/values.yaml"
      - "{{.ROOT_DIR}}/../minikube/jaeger/deployment-patch.yaml"
      - "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  install-grafana-charts:
    label: "install-grafana-charts-{{.ROSA_CLUSTER_NAME}}"
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    cmds:
      - >
        KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        helm upgrade --install monitoring "{{.KC_DIR}}/monitoring"
    sources:
      - "{{.KC_DIR}}/monitoring/*"
      - "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"


  monitoring:
    desc: "Install grafana dashboards in both ROSA clusters"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
    cmds:
      - task: helm-add-repos
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: ispn:create-namespace
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "monitoring"
      - task: ispn:create-namespace
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "monitoring"
      - task: create-grafana-service-account
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: create-grafana-service-account
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: install-grafana
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: install-grafana
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: install-jaeger
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: install-jaeger
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: install-grafana-charts
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: install-grafana-charts
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

  global-accelerator-create:
    desc: "Creates AWS Global Accelerator for active-active replication"
    dir: "{{.ACCELERATOR_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - ACCELERATOR_NAME
    cmds:
      - KEYCLOAK_NAMESPACE="{{.KC_NAMESPACE_PREFIX}}keycloak" ACCELERATOR_NAME={{.ACCELERATOR_NAME}} CLUSTER_1={{.ROSA_CLUSTER_NAME_1}} CLUSTER_2={{.ROSA_CLUSTER_NAME_2}} ./accelerator_multi_az_create.sh
      - >
        echo 'WARNING: use the information above to configure your Keycloak deployment!'

  global-accelerator-delete:
    desc: "Deletes AWS Global Accelerator for active-active replication"
    dir: "{{.ACCELERATOR_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - ACCELERATOR_NAME
    cmd: KEYCLOAK_NAMESPACE="{{.KC_NAMESPACE_PREFIX}}keycloak" ACCELERATOR_NAME={{.ACCELERATOR_NAME}} CLUSTER_1={{.ROSA_CLUSTER_NAME_1}} CLUSTER_2={{.ROSA_CLUSTER_NAME_2}} ./accelerator_multi_az_delete.sh

  global-accelerator-recover:
    desc: "Recover from Global Accelerator split-brain"
    cmds:
      - task: global-accelerator-create

  route53:
    desc: "Creates Route53 primary/backup DNS records"
    dir: "{{.ROUTE53_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
    cmds:
      - PRIMARY_CLUSTER={{.ROSA_CLUSTER_NAME_1}} BACKUP_CLUSTER={{.ROSA_CLUSTER_NAME_2}} ./route53_create.sh
      - >
        echo 'WARNING: use the information above to configure your Keycloak deployment!'

  route53-test-primary-used:
    desc: "Checks if the primary cluster is active and prints it to the console"
    dir: "{{.ROUTE53_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - KC_CLIENT_URL
    cmd: (./route53_test_primary_used.sh {{substr 7 999999 .KC_CLIENT_URL}} && echo "Primary cluster is active") || echo "Primary cluster is NOT active"

  dataset-import:
    internal: true
    requires:
      vars:
        - KC_URL
    vars:
      USERS: "{{.USERS | default 100000}}"
      USERS_PER_TX: "{{.USERS_PER_TX | default 256}}"
      THREADS: "{{.THREADS | default 8}}"
    cmds:
      - curl -k "https://{{.KC_URL}}/realms/master/dataset/create-realms?realm-name=realm-0&count=1&threads-count={{.THREADS}}&users-per-realm={{.USERS}}&users-per-transaction={{.USERS_PER_TX}}"

  dataset-import-external:
    desc: "Triggers the dataset creation task using the Route53 or Global Accelerator load balancer. It does not wait for completion."
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - KC_CLIENT_URL
    cmd:
      task: dataset-import
      vars:
        KC_URL: "{{.KC_CLIENT_URL}}"

  dataset-import-ingress:
    desc: "Triggers the dataset creation task in the ROSA cluster route. It does not wait for completion."
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - KC_NAMESPACE_PREFIX
    cmds:
      - task: ispn:rosa-oc-login
      - task: dataset-import
        vars:
          KC_URL:
            sh: echo "keycloak-{{.KC_NAMESPACE_PREFIX}}keycloak.$(cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}})"

  ec2-create:
    desc: "Creates the EC2 workers"
    dir: "{{.ANSIBLE_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - EC2_REGION
    cmds:
      - ./aws_ec2.sh create {{.EC2_REGION}}

  ec2-delete:
    desc: "Deletes the EC2 workers"
    dir: "{{.ANSIBLE_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - EC2_REGION
    cmds:
      - ./aws_ec2.sh delete {{.EC2_REGION}}

  ec2-run:
    internal: true
    dir: "{{.ANSIBLE_DIR}}"
    requires:
      vars:
        - EC2_REGION
        - KC_URL
    vars:
      SCENARIO: '{{.SCENARIO | default "keycloak.scenario.authentication.AuthorizationCode"}}'
      USERS: "{{.USERS | default 100000}}"
      USERS_PER_SEC: "{{.USERS_PER_SEC | default 300}}"
      DURATION: "{{.DURATION | default 600}}"
      REFRESH_TOKEN_COUNT: "{{.REFRESH_TOKEN_COUNT | default 0}}"
      REFRESH_TOKEN_PERIOD: "{{.REFRESH_TOKEN_PERIOD | default 0}}"
    cmds:
      - >
        ./benchmark.sh "{{.EC2_REGION}}"
        --scenario="{{.SCENARIO}}"
        --server-url="https://{{.KC_URL}}/"
        --users-per-sec={{.USERS_PER_SEC}}
        --measurement={{.DURATION}}
        --realm-name=realm-0
        --logout-percentage=100
        --users-per-realm={{.USERS}}
        --ramp-up=100
        --log-http-on-failure
        --refresh-token-count={{.REFRESH_TOKEN_COUNT}}
        --refresh-token-period={{.REFRESH_TOKEN_PERIOD}}

  ec2-run-external:
    desc: "Runs a Gatling scenario in EC2 using Route53 or Global Accelerator load balancer"
    dir: "{{.ANSIBLE_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - EC2_REGION
        - KC_CLIENT_URL
    cmd:
      task: ec2-run
      vars:
        KC_URL: "{{.KC_CLIENT_URL}}"

  ec2-run-ingress:
    desc: "Runs a Gatling scenario in EC2 using ROSA cluster route"
    dir: "{{.ANSIBLE_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - EC2_REGION
        - ROSA_CLUSTER_NAME
    cmds:
      - task: ispn:rosa-oc-login
      - task: ec2-run
        vars:
          KC_URL:
            sh: echo "keycloak-{{.KC_NAMESPACE_PREFIX}}keycloak.$(cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}})"

  fetch-grafana-snapshot:
    internal: true
    dir: "{{.PYTHON_DIR}}"
    requires:
      vars:
        - TIME_WINDOW
        - GRAFANA_DOMAIN
        - KEYCLOAK_MASTER_PASSWORD
    cmds:
      - >
        python3 snapGrafana.py
        --grafana_domain "{{.GRAFANA_DOMAIN}}"
        --admin_password "{{.KEYCLOAK_MASTER_PASSWORD}}"
        --time_window "{{.TIME_WINDOW}}"
        --keycloak_namespace "{{.KC_NAMESPACE_PREFIX}}keycloak"

  grafana-snapshot:
    desc: "Takes a snapshot from the Grafana Dashboards into PDF files"
    dir: "{{.PYTHON_DIR}}"
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - TIME_WINDOW
        - KEYCLOAK_MASTER_PASSWORD
    cmds:
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: ispn:rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: fetch-grafana-snapshot
        vars:
          GRAFANA_DOMAIN:
            sh: echo "grafana.$(cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME_1}})"
      - task: fetch-grafana-snapshot
        vars:
          GRAFANA_DOMAIN:
            sh: echo "grafana.$(cat {{.ISPN_DIR}}/.task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME_2}})"

  trigger-failover:
    desc: "Triggers the failover script"
    dir: "{{.BENCHMARK_DIR}}"
    requires:
      vars:
        - DOMAIN
        - FAILOVER_MODE
        - ROSA_CLUSTER_NAME
    vars:
      FAILOVER_DELAY: "{{.FAILOVER_DELAY | default 240}}"
    cmds:
      - task: ispn:rosa-oc-login
      - >
        KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        DOMAIN="{{.DOMAIN}}"
        PROJECT="{{.KC_NAMESPACE_PREFIX}}keycloak"
        FAILOVER_MODE="{{.FAILOVER_MODE}}"
        FAILOVER_DELAY="{{.FAILOVER_DELAY}}"
        ./kc-failover.sh

  deploy-route53-failover-lambda:
    desc: "Creates Route53 primary failover lambda"
    dir: "{{.ROUTE53_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - KC_HEALTH_URL_CLUSTER_1
    cmds:
      - DOMAIN={{.KC_HEALTH_URL_CLUSTER_1}} ./route53_create_failover_lambda.sh

  undeploy-route53-failover-lambda:
    desc: "Undeploys the Route53 primary failover lambda"
    dir: "{{.ROUTE53_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - KC_HEALTH_URL_CLUSTER_1
    cmds:
      - DOMAIN={{.KC_HEALTH_URL_CLUSTER_1}} ./route53_delete_failover_lambda.sh

  route53-failback:
    desc: "Failback from Route53 primary failover lambda"
    dir: "{{.ROUTE53_DIR}}"
    deps:
      - common:split
      - common:env
    requires:
      vars:
        - KC_HEALTH_URL_CLUSTER_1
    vars:
      WAIT: "{{ .WAIT | default 0 }}"
    cmds:
      - WAIT={{.WAIT}} DOMAIN={{.KC_HEALTH_URL_CLUSTER_1}} ./route53_failback.sh

  update-env-configjson-with-ispn-data:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    cmds:
      - echo "Updating environment json file with Infinispan data"
      - task: update-env-configjson-with-new-values
        vars:
          PROP_NAME: "ispnDeployment"
          PROP_VALUE:
            sh: cat "{{.ISPN_DIR}}/.task/kubecfg/ispn-{{.ROSA_CLUSTER_NAME}}"
    sources:
      - "{{.ISPN_DIR}}/.task/kubecfg/ispn-{{.ROSA_CLUSTER_NAME}}"
    preconditions:
      - test -f "{{.ISPN_DIR}}/.task/kubecfg/ispn-{{.ROSA_CLUSTER_NAME}}"

  update-env-configjson-with-new-values:
    internal: true
    requires:
      vars:
        - PROP_NAME
        - PROP_VALUE
    cmds:
      - echo "Updating environment json file with {{.PROP_NAME}}"
      - "jq --arg key '{{.PROP_NAME}}' --arg value '{{ .PROP_VALUE }}' '. + {($key): ($value)}' {{.ENV_DATA_JSON_PATH}} > tmp.json && mv tmp.json {{.ENV_DATA_JSON_PATH}}"
    preconditions:
      - test -f "{{.ENV_DATA_JSON_PATH}}"

  create-env-configmap:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    cmds:
      - echo "Creating configmap with environment data."
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" kubectl -n {{.KC_NAMESPACE_PREFIX}}keycloak delete configmap env-config --ignore-not-found
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" kubectl -n {{.KC_NAMESPACE_PREFIX}}keycloak create configmap env-config --from-file={{.ENV_DATA_JSON_PATH}}
    preconditions:
      - test -f "{{.ENV_DATA_JSON_PATH}}"
      - test -f "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  delete-env-configmap:
    internal: true
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    cmds:
      - echo "Deleting configmap with environment data."
      - KUBECONFIG="{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}" kubectl -n {{.KC_NAMESPACE_PREFIX}}keycloak delete configmap env-config --ignore-not-found
    preconditions:
      - test -f "{{.ISPN_DIR}}/.task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
