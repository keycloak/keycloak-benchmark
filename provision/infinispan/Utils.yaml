# https://taskfile.dev
version: '3'

vars:
  INTERNAL_SHARED_PASSWORD:
    sh: aws secretsmanager get-secret-value --region eu-central-1 --secret-id keycloak-master-password --query SecretString --output text --no-cli-pager

tasks:
  rosa-oc-login:
    label: 'rosa-oc-login-{{.ROSA_CLUSTER_NAME}}'
    desc: "Login into ROSA cluster"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
    vars:
      # do not overwrite! Storing the ROSA cluster ID here.
      INTERNAL_ROSA_ID:
        sh: rosa describe cluster -c "{{.ROSA_CLUSTER_NAME}}" -o json | jq .id
    cmds:
      - mkdir -p .task/kubecfg
      - echo {{.INTERNAL_ROSA_ID}} > ".task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" CLUSTER_NAME="{{.ROSA_CLUSTER_NAME}}" ../aws/rosa_oc_login.sh
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get route/console -n openshift-console -o jsonpath={.spec.host} | cut -d . -f 2- > ".task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc config view --minify -o jsonpath='{.clusters[0].cluster.server}' | sed 's|^http[s]://||g' > .task/kubecfg/api-{{.ROSA_CLUSTER_NAME}}
    generates:
      - .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}
      - .task/kubecfg/{{.ROSA_CLUSTER_NAME}}
      - .task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}
      - .task/kubecfg/api-{{.ROSA_CLUSTER_NAME}}
    status:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
      - test -f ".task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}"
      - test -f ".task/kubecfg/ocp-prefix-{{.ROSA_CLUSTER_NAME}}"
      - test -f ".task/kubecfg/api-{{.ROSA_CLUSTER_NAME}}"
      - test {{.INTERNAL_ROSA_ID}} == "$(cat .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}})"
      # we ensure during the status test, the login session is still up-to-date.
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc project
    internal: true

  create-namespace:
    label: 'create-namespace-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    desc: "Creates a new namespace if missing"
    requires:
      vars:
        - NAMESPACE
        - ROSA_CLUSTER_NAME
    cmds:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc new-project "{{.NAMESPACE}}" || true
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
    status:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc project "{{.NAMESPACE}}" -q
    internal: true

  deploy-infinispan:
    label: 'deploy-infinispan-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Deploys Infinispan CR"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - NAMESPACE
    vars:
      CROSS_DC_SA_TOKEN_SECRET: '{{.CROSS_DC_SA_TOKEN_SECRET | default "xsite-token-secret"}}'
      CROSS_DC_JGRP_TS_SECRET: '{{.CROSS_DC_JGRP_TS_SECRET | default "xsite-truststore-secret"}}'
      CROSS_DC_JGRP_KS_SECRET: '{{.CROSS_DC_JGRP_KS_SECRET | default "xsite-keystore-secret"}}'
      CROSS_DC_EXTERNAL_ROUTER_ENABLED: '{{.CROSS_DC_EXTERNAL_ROUTER_ENABLED | default "false"}}'
      CROSS_DC_ENABLED: '{{.CROSS_DC_ENABLED | default "false"}}'
      CROSS_DC_HOT_ROD_PASSWORD: '{{.CROSS_DC_HOT_ROD_PASSWORD | default .INTERNAL_SHARED_PASSWORD | default "changeme" }}'
      CROSS_DC_HISTOGRAMS: '{{.CROSS_DC_HISTOGRAMS | default "false"}}'
      CROSS_DC_MODE: '{{.CROSS_DC_MODE | default "SYNC" }}'
      CROSS_DC_STATE_TRANSFER_MODE: '{{.CROSS_DC_STATE_TRANSFER_MODE | default "AUTO" }}'
      CROSS_DC_ISPN_REPLICAS: '{{.CROSS_DC_ISPN_REPLICAS | default "3" }}'
      CROSS_DC_CPU_REQUESTS: '{{.CROSS_DC_CPU_REQUESTS}}'
      CROSS_DC_MEMORY_REQUESTS: '{{.CROSS_DC_MEMORY_REQUESTS}}'
      CROSS_DC_JVM_OPTS: '{{.CROSS_DC_JVM_OPTS}}'
      CROSS_DC_LOCAL_GOSSIP_ROUTER: '{{.CROSS_DC_LOCAL_GOSSIP_ROUTER | default "true"}}'
      CROSS_DC_REMOTE_GOSSIP_ROUTER: '{{.CROSS_DC_REMOTE_GOSSIP_ROUTER | default "true"}}'
      CROSS_DC_FD_INTERVAL: '{{.CROSS_DC_FD_INTERVAL | default "2000"}}'
      CROSS_DC_FD_TIMEOUT: '{{.CROSS_DC_FD_TIMEOUT | default "10000"}}'
    cmds:
      - >
        KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" helm upgrade --install infinispan --namespace {{.NAMESPACE}}
        --set namespace={{.NAMESPACE}}
        --set replicas={{.CROSS_DC_ISPN_REPLICAS}}
        --set cpu={{.CROSS_DC_CPU_REQUESTS}}
        --set memory={{.CROSS_DC_MEMORY_REQUESTS}}
        --set jvmOptions={{.CROSS_DC_JVM_OPTS}}
        --set crossdc.enabled={{.CROSS_DC_ENABLED}}
        --set crossdc.local.name={{.CROSS_DC_LOCAL_SITE}}
        --set crossdc.local.gossipRouterEnabled={{.CROSS_DC_LOCAL_GOSSIP_ROUTER}}
        --set crossdc.remote.name={{.CROSS_DC_REMOTE_SITE}}
        --set crossdc.remote.gossipRouterEnabled={{.CROSS_DC_REMOTE_GOSSIP_ROUTER}}
        --set crossdc.remote.namespace={{.CROSS_DC_REMOTE_SITE_NAMESPACE}}
        --set crossdc.remote.url={{.CROSS_DC_API_URL}}
        --set crossdc.remote.secret={{.CROSS_DC_SA_TOKEN_SECRET}}
        --set crossdc.route.enabled={{.CROSS_DC_EXTERNAL_ROUTER_ENABLED}}
        --set crossdc.route.tls.keystore.secret={{.CROSS_DC_JGRP_KS_SECRET}}
        --set crossdc.route.tls.truststore.secret={{.CROSS_DC_JGRP_TS_SECRET}}
        --set metrics.histograms={{.CROSS_DC_HISTOGRAMS}}
        --set hotrodPassword={{.CROSS_DC_HOT_ROD_PASSWORD}}
        --set cacheDefaults.crossSiteMode={{.CROSS_DC_MODE}}
        --set cacheDefaults.stateTransferMode={{.CROSS_DC_STATE_TRANSFER_MODE}}
        --set image={{.CROSS_DC_IMAGE}}
        --set fd.interval={{.CROSS_DC_FD_INTERVAL}}
        --set fd.timeout={{.CROSS_DC_FD_TIMEOUT}}
        ./ispn-helm
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
    status:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc -n {{.NAMESPACE}} get infinispans.infinispan.org infinispan
      - test "{{.FORCE_INFINISPAN | default 0}}" == "0"
    sources:
      - .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}
      - ispn-helm/**/*.*
      - .task/subtask-{{.TASK}}.yaml

  create-jgroups-tls-secret:
    label: 'create-jgroups-tls-secret-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Creates Keystore and Truststore secrets used by JGroups to establish TLS connections"
    requires:
      vars:
        - NAMESPACE
        - ROSA_CLUSTER_NAME
    vars:
      CROSS_DC_JGRP_TS_SECRET: '{{.CROSS_DC_JGRP_TS_SECRET |  default "xsite-truststore-secret"}}'
      CROSS_DC_JGRP_KS_SECRET: '{{.CROSS_DC_JGRP_KS_SECRET | default "xsite-keystore-secret"}}'
    cmds:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc -n "{{.NAMESPACE}}" delete secret "{{.CROSS_DC_JGRP_KS_SECRET}}" || true
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc -n "{{.NAMESPACE}}" delete secret "{{.CROSS_DC_JGRP_TS_SECRET}}" || true
      - >
        KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        oc -n "{{.NAMESPACE}}" create secret generic "{{.CROSS_DC_JGRP_KS_SECRET}}"
        --from-file=keystore.p12="./certs/keystore.p12"
        --from-literal=password=secret
        --from-literal=type=pkcs12
      - >
        KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
        oc -n "{{.NAMESPACE}}" create secret generic "{{.CROSS_DC_JGRP_TS_SECRET}}"
        --from-file=truststore.p12="./certs/truststore.p12"
        --from-literal=password=caSecret
        --from-literal=type=pkcs12
    sources:
      - ./certs/keystore.p12
      - ./certs/truststore.p12
      - .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}
      - .task/subtask-{{.TASK}}.yaml
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
    status:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get secrets -n "{{.NAMESPACE}}" "{{.CROSS_DC_JGRP_KS_SECRET}}"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get secrets -n "{{.NAMESPACE}}" "{{.CROSS_DC_JGRP_TS_SECRET}}"

  create-xsite-service-account:
    label: 'create-xsite-service-account-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Creates a service account for Cross-Site. Infinispan operator uses to connect to the remote site"
    requires:
      vars:
        - NAMESPACE
        - ROSA_CLUSTER_NAME
        - TOKEN_FILE
    vars:
      CROSS_DC_SERVICE_ACCOUNT: '{{.CROSS_DC_SERVICE_ACCOUNT | default "xsite-sa"}}'
    cmds:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc create sa -n "{{.NAMESPACE}}" "{{.CROSS_DC_SERVICE_ACCOUNT}}" || true
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc policy add-role-to-user view -n "{{.NAMESPACE}}" -z "{{.CROSS_DC_SERVICE_ACCOUNT}}" || true
      - mkdir -p .task/tokens
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc create token -n "{{.NAMESPACE}}" "{{.CROSS_DC_SERVICE_ACCOUNT}}" > .task/tokens/{{.TOKEN_FILE}}
    generates:
      - .task/tokens/{{.TOKEN_FILE}}
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"
    sources:
      - .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}
      - .task/subtask-{{.TASK}}.yaml
    status:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc get sa -n "{{.NAMESPACE}}" "{{.CROSS_DC_SERVICE_ACCOUNT}}"
      - test -f .task/tokens/{{.TOKEN_FILE}}

  deploy-xsite-service-account-token:
    label: 'deploy-xsite-service-account-token-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Creates a secret with the service account token"
    requires:
      vars:
        - NAMESPACE
        - ROSA_CLUSTER_NAME
        - TOKEN_FILE
    vars:
      CROSS_DC_SA_TOKEN_SECRET: '{{.CROSS_DC_SA_TOKEN_SECRET | default "xsite-token-secret"}}'
    cmds:
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc delete secret -n "{{.NAMESPACE}}" "{{.CROSS_DC_SA_TOKEN_SECRET}}" || true
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc create secret generic -n "{{.NAMESPACE}}" "{{.CROSS_DC_SA_TOKEN_SECRET}}" --from-literal=token="$(cat .task/tokens/{{.TOKEN_FILE}})"
    sources:
      - .task/kubecfg/id-{{.ROSA_CLUSTER_NAME}}
      - .task/subtask-{{.TASK}}.yaml
      - .task/tokens/{{.TOKEN_FILE}}
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  wait-cluster:
    label: 'wait-cluster-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Waits for the Infinispan cluster to form"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - NAMESPACE
    vars:
      CROSS_DC_WAIT_TIMEOUT: '{{.CROSS_DC_WAIT_TIMEOUT | default "300"}}'
    cmds:
      - echo "Waiting for the Infinispan cluster to form on namespace '{{.NAMESPACE}}' (timeout after {{.CROSS_DC_WAIT_TIMEOUT}} seconds)"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for condition=WellFormed --timeout={{.CROSS_DC_WAIT_TIMEOUT}}s infinispans.infinispan.org -n "{{.NAMESPACE}}" infinispan
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  wait-crossdc:
    label: 'wait-crossdc-{{.ROSA_CLUSTER_NAME}}-{{.NAMESPACE}}'
    internal: true
    desc: "Waits for the Infinispan Cross-Site to form"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - NAMESPACE
    vars:
      CROSS_DC_WAIT_TIMEOUT: '{{.CROSS_DC_WAIT_TIMEOUT | default "300"}}'
    cmds:
      - echo "Waiting for the Infinispan cross-site to form on namespace '{{.NAMESPACE}}' (timeout after {{.CROSS_DC_WAIT_TIMEOUT}} seconds)"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc wait --for condition=CrossSiteViewFormed --timeout={{.CROSS_DC_WAIT_TIMEOUT}}s infinispans.infinispan.org -n "{{.NAMESPACE}}" infinispan
    preconditions:
      - test -f ".task/kubecfg/{{.ROSA_CLUSTER_NAME}}"

  single-cluster:
    internal: true
    desc: "Creates a single cluster Infinispan deployment"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - OC_NAMESPACE
    cmds:
      - task: rosa-oc-login
      - task: create-namespace
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE}}"
      - task: deploy-infinispan
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE}}"
          CROSS_DC_ENABLED: "false"
      - task: wait-cluster
        vars:
          NAMESPACE: "{{.OC_NAMESPACE}}"

  crossdc-single:
    internal: true
    desc: "Creates a cross-site enabled Infinispan deployment between 2 namespaces"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - OC_NAMESPACE_1
        - OC_NAMESPACE_2
    preconditions:
      - sh: test "{{.OC_NAMESPACE_1}}" != "{{.OC_NAMESPACE_2}}"
        msg: "Different namespaces are required."
    cmds:
      - task: rosa-oc-login
      - task: create-namespace
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: create-namespace
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
      - task: deploy-infinispan
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
          CROSS_DC_ENABLED: "true"
          CROSS_DC_LOCAL_SITE: "{{.OC_NAMESPACE_1}}"
          CROSS_DC_REMOTE_SITE: "{{.OC_NAMESPACE_2}}"
          CROSS_DC_REMOTE_SITE_NAMESPACE: "{{.OC_NAMESPACE_2}}"
      - task: deploy-infinispan
        vars:
          KUBECONFIG: "{{.ROSA_CLUSTER_NAME}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
          CROSS_DC_ENABLED: "true"
          CROSS_DC_LOCAL_SITE: "{{.OC_NAMESPACE_2}}"
          CROSS_DC_REMOTE_SITE: "{{.OC_NAMESPACE_1}}"
          CROSS_DC_REMOTE_SITE_NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: wait-cluster
        vars:
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: wait-cluster
        vars:
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
      - task: wait-crossdc
        vars:
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: wait-crossdc
        vars:
          NAMESPACE: "{{.OC_NAMESPACE_2}}"

  crossdc:
    internal: true
    desc: "Creates a cross-site enabled Infinispan deployment between 2 OCP clusters"
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - OC_NAMESPACE_1
        - OC_NAMESPACE_2
    preconditions:
      - sh: test "{{.ROSA_CLUSTER_NAME_1}}" != "{{.ROSA_CLUSTER_NAME_2}}"
        msg: "Different ROSA clusters are required."
    cmds:
      - task: rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"

      - task: create-namespace
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: create-namespace
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"

      - task: create-jgroups-tls-secret
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: create-jgroups-tls-secret
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"

      - task: create-xsite-service-account
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
          TOKEN_FILE: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: create-xsite-service-account
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
          TOKEN_FILE: "{{.ROSA_CLUSTER_NAME_2}}"

      - task: deploy-xsite-service-account-token
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
          TOKEN_FILE: "{{.ROSA_CLUSTER_NAME_2}}"
      - task: deploy-xsite-service-account-token
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
          TOKEN_FILE: "{{.ROSA_CLUSTER_NAME_1}}"

      - task: deploy-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
          CROSS_DC_REMOTE_SITE_NAMESPACE: "{{.OC_NAMESPACE_2}}"
          CROSS_DC_ENABLED: "true"
          CROSS_DC_EXTERNAL_ROUTER_ENABLED: "true"
          CROSS_DC_LOCAL_SITE: "{{.ROSA_CLUSTER_NAME_1}}"
          CROSS_DC_REMOTE_SITE: "{{.ROSA_CLUSTER_NAME_2}}"
          CROSS_DC_API_URL: "openshift://$(cat .task/kubecfg/api-{{.ROSA_CLUSTER_NAME_2}})"
      - task: deploy-infinispan
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
          CROSS_DC_REMOTE_SITE_NAMESPACE: "{{.OC_NAMESPACE_1}}"
          CROSS_DC_ENABLED: "true"
          CROSS_DC_EXTERNAL_ROUTER_ENABLED: "true"
          CROSS_DC_LOCAL_SITE: "{{.ROSA_CLUSTER_NAME_2}}"
          CROSS_DC_REMOTE_SITE: "{{.ROSA_CLUSTER_NAME_1}}"
          CROSS_DC_API_URL: "openshift://$(cat .task/kubecfg/api-{{.ROSA_CLUSTER_NAME_1}})"
      - task: wait-cluster
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: wait-cluster
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"
      - task: wait-crossdc
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
          NAMESPACE: "{{.OC_NAMESPACE_1}}"
      - task: wait-crossdc
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
          NAMESPACE: "{{.OC_NAMESPACE_2}}"

  delete-infinispan:
    internal: true
    desc: "Deletes the Infinispan CR"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - OC_NAMESPACE
    cmds:
      - task: rosa-oc-login
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc delete infinispans.infinispan.org -n "{{.OC_NAMESPACE}}" infinispan

  delete-crossdc-single:
    internal: true
    desc: "Deletes the Infinispan CR in a cross-site deployment in a single OCP cluster"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - OC_NAMESPACE_1
        - OC_NAMESPACE_2
    preconditions:
      - sh: test "{{.OC_NAMESPACE_1}}" != "{{.OC_NAMESPACE_2}}"
        msg: "Different namespaces are required."
    cmds:
      - task: rosa-oc-login
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc delete infinispans.infinispan.org -n "{{.OC_NAMESPACE_1}}" infinispan
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME}}" oc delete infinispans.infinispan.org -n "{{.OC_NAMESPACE_2}}" infinispan

  delete-crossdc:
    internal: true
    desc: "Deletes the Infinispan CR from cross-site deployment"
    requires:
      vars:
        - ROSA_CLUSTER_NAME_1
        - ROSA_CLUSTER_NAME_2
        - OC_NAMESPACE_1
        - OC_NAMESPACE_2
    preconditions:
      - sh: test "{{.ROSA_CLUSTER_NAME_1}}" != "{{.ROSA_CLUSTER_NAME_2}}"
        msg: "Different ROSA clusters are required."
    cmds:
      - task: rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_1}}"
      - task: rosa-oc-login
        vars:
          ROSA_CLUSTER_NAME: "{{.ROSA_CLUSTER_NAME_2}}"
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME_1}}" oc delete infinispans.infinispan.org -n "{{.OC_NAMESPACE_1}}" infinispan
      - KUBECONFIG=".task/kubecfg/{{.ROSA_CLUSTER_NAME_2}}" oc delete infinispans.infinispan.org -n "{{.OC_NAMESPACE_2}}" infinispan

  crossdc-connect:
    internal: true
    desc: "Bring the backup site online"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - NAMESPACE
    cmds:
      - task: rosa-oc-login

      - |
        cat << EOF | kubectl -n {{ .NAMESPACE }} apply -f -
        apiVersion: infinispan.org/v2alpha1
        kind: Batch
        metadata:
          name: bring-online
        spec:
          cluster: infinispan
          configMap: crossdc-connect
        EOF
      - kubectl -n {{ .NAMESPACE }} wait --for=jsonpath='{.status.phase}'=Succeeded Batch/bring-online
      - defer: |
          kubectl -n {{ .NAMESPACE }} logs job/bring-online || true
          kubectl -n {{ .NAMESPACE }} delete Batch/bring-online || true

  crossdc-disconnect:
    internal: true
    desc: "Take the backup site offline"
    requires:
      vars:
        - ROSA_CLUSTER_NAME
        - NAMESPACE
    cmds:
      - task: rosa-oc-login

      - |
        cat << EOF | kubectl -n {{ .NAMESPACE }} apply -f -
        apiVersion: infinispan.org/v2alpha1
        kind: Batch
        metadata:
          name: take-offline
        spec:
          cluster: infinispan
          configMap: crossdc-disconnect
        EOF
      - kubectl -n {{ .NAMESPACE }} wait --for=jsonpath='{.status.phase}'=Succeeded Batch/take-offline
      - defer: |
          kubectl -n {{ .NAMESPACE }} logs job/take-offline || true
          kubectl -n {{ .NAMESPACE }} delete Batch/take-offline || true
