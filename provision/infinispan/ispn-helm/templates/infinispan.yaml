# There are several callouts in this YAML marked with `# <1>' etc. See 'running/infinispan-deployment.adoc` for the details.
{{- $namespace := .Values.namespace | required ".Values.namespace is required." -}}
# tag::infinispan-credentials[]
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: connect-secret
  namespace: {{ $namespace }}
data:
  identities.yaml: {{ (.Files.Get "identities.yaml") | replace "_password_" .Values.hotrodPassword | b64enc }} # <1>
# end::infinispan-credentials[]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-config
  namespace: {{ $namespace }}
data:
  infinispan-config.yaml: >
    infinispan:
      cacheContainer:
        metrics:
          namesAsTags: true
          gauges: true
          histograms: {{ .Values.metrics.histograms }}
---
# tag::infinispan-crossdc[]
# tag::infinispan-single[]
apiVersion: infinispan.org/v1
kind: Infinispan
metadata:
  name: infinispan # <1>
  namespace: {{ $namespace }}
  annotations:
    infinispan.org/monitoring: 'true' # <2>
spec:
  replicas: {{ .Values.replicas }}
# end::infinispan-single[]
# end::infinispan-crossdc[]
  # This exposes the http endpoint to interact with its caches - more info - https://infinispan.org/docs/stable/titles/rest/rest.html
  # We can optionally set the host in the below expose yaml block, otherwise it will be set to a default naming pattern.
  expose:
    type: Route
  configMapName: "cluster-config"
  image: {{ .Values.image | default .Values.defaultImage }}
  configListener:
    enabled: false
  container:
    extraJvmOpts: '-Dorg.infinispan.openssl=false -Dinfinispan.cluster.name=ISPN {{.Values.jvmOptions}} -Djgroups.xsite.fd.interval={{.Values.fd.interval}} -Djgroups.xsite.fd.timeout={{.Values.fd.timeout}}'
    {{- if .Values.cpu }}
    cpu: {{ .Values.cpu }}
    {{- end}}
    {{- if .Values.memory }}
    memory: {{ .Values.memory }}
    {{- end}}
  logging:
    categories:
      org.infinispan: {{ .Values.logging.infinispan }}
      org.jgroups: {{ .Values.logging.jgroups }}
  # tag::infinispan-crossdc[]
  # tag::infinispan-single[]
  security:
    endpointSecretName: connect-secret # <3>
  service:
    type: DataGrid
    # end::infinispan-single[]
    {{ if .Values.crossdc.enabled }}
    {{- $_ := .Values.crossdc.local.name | required ".Values.crossdc.local.name is required." -}}
    {{- $_ := .Values.crossdc.remote.name | required ".Values.crossdc.remote.name is required." -}}
    sites:
      local:
        name: {{ .Values.crossdc.local.name }} # <4>
        # end::infinispan-crossdc[]
        discovery:
          launchGossipRouter: {{ .Values.crossdc.local.gossipRouterEnabled }}
        # tag::infinispan-crossdc[]
        expose:
          type: {{ if .Values.crossdc.route.enabled }}Route{{else}}ClusterIP{{end}} # <5>
        maxRelayNodes: 128
        {{ if .Values.crossdc.route.enabled }}
        {{- $_ := .Values.crossdc.route.tls.keystore.secret | required ".Values.crossdc.route.tls.keystore.secret is required." -}}
        {{- $_ := .Values.crossdc.route.tls.truststore.secret | required ".Values.crossdc.route.tls.truststore.secret is required." -}}
        encryption:
          transportKeyStore:
            secretName: {{ .Values.crossdc.route.tls.keystore.secret }} # <6>
            alias: {{ .Values.crossdc.route.tls.keystore.alias }} # <7>
            filename: {{ .Values.crossdc.route.tls.keystore.filename }} # <8>
          routerKeyStore:
            secretName: {{ .Values.crossdc.route.tls.keystore.secret }} # <6>
            alias: {{ .Values.crossdc.route.tls.keystore.alias }} # <7>
            filename: {{ .Values.crossdc.route.tls.keystore.filename }} # <8>
          trustStore:
            secretName: {{ .Values.crossdc.route.tls.truststore.secret }} # <9>
            filename: {{ .Values.crossdc.route.tls.truststore.filename }} # <10>
        {{- end }}
      locations:
        - name: {{ .Values.crossdc.remote.name }} # <11>
          {{- if .Values.crossdc.remote.gossipRouterEnabled }}
          clusterName: infinispan
          namespace: {{ .Values.crossdc.remote.namespace}} # <12>
          {{ if .Values.crossdc.route.enabled }}
          {{- $_ := .Values.crossdc.remote.url | required ".Values.crossdc.remote.url is required." -}}
          {{- $_ := .Values.crossdc.remote.secret | required ".Values.crossdc.remote.secret is required." -}}
          url: {{ .Values.crossdc.remote.url }} # <13>
          secretName: {{ .Values.crossdc.remote.secret }} # <14>
          {{ end }}
          {{- end }}
    {{- end }}
    # end::infinispan-crossdc[]
{{range $cache, $config := .Values.caches -}}
---
# tag::infinispan-cache-{{ $cache }}[]
apiVersion: infinispan.org/v2alpha1
kind: Cache
metadata:
  name: {{ $cache | lower }}
  namespace: {{ $namespace }}
spec:
  clusterName: infinispan
  name: {{ $cache }}
  template: |-
    distributedCache:
      mode: "SYNC"
      owners: {{ $config.owners | default $.Values.cacheDefaults.owners | quote }}
      statistics: "true"
      stateTransfer:
        chunkSize: 16
      {{ if $.Values.crossdc.enabled }}
      {{- $_ := $.Values.crossdc.remote.name | required ".Values.crossdc.remote.name is required." -}}
      backups:
        {{- if $config.mergePolicy }}
        mergePolicy: {{ $config.mergePolicy }} # <1>
        {{- end}}
        {{$.Values.crossdc.remote.name }}: # <2>
          backup:
            strategy: {{ $config.crossSiteMode | default $.Values.cacheDefaults.crossSiteMode | quote }} # <3>
            stateTransfer:
              chunkSize: 16
              {{- if eq ($config.crossSiteMode | default $.Values.cacheDefaults.crossSiteMode) "ASYNC"}}
              mode: {{ $config.stateTransferMode | default $.Values.cacheDefaults.stateTransferMode | quote }} # <4>
              {{- end }}
      {{- end }}
# end::infinispan-cache-{{ $cache }}[]
{{end}}
{{ if .Values.crossdc.enabled }}
---
# tag::infinispan-crossdc-status[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-status
  namespace: {{ $namespace }}
data:
  batch: site status --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-status[]
---
# tag::infinispan-crossdc-disconnect[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-disconnect
  namespace: {{ $namespace }}
data:
  batch: site take-offline --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-disconnect[]
---
# tag::infinispan-crossdc-connect[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-connect
  namespace: {{ $namespace }}
data:
  batch: site bring-online --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-connect[]
---
# tag::infinispan-crossdc-push-state[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-push-state
  namespace: {{ $namespace }}
data:
  batch: site push-site-state --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-push-state[]
---
# tag::infinispan-crossdc-push-state-status[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-push-state-status
  namespace: {{ $namespace }}
data:
  batch: site push-site-status --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-push-state-status[]
---
# tag::infinispan-crossdc-reset-push-state-status[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-reset-push-state-status
  namespace: {{ $namespace }}
data:
  batch: site clear-push-state-status --all-caches --site={{.Values.crossdc.remote.name}}
# end::infinispan-crossdc-reset-push-state-status[]
---
# tag::infinispan-crossdc-clear-caches[]
apiVersion: v1
kind: ConfigMap
metadata:
  name: crossdc-clear-caches
  namespace: {{ $namespace }}
data:
  batch: |+
    {{range $cache, $config := .Values.caches -}}
    clearcache {{ $cache }}
    {{ end }}
# end::infinispan-crossdc-clear-caches[]
{{ end }}
