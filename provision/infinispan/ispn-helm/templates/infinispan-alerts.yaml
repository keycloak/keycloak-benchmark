{{ if .Values.acceleratorDNS }}
# tag::fencing-secret[]
apiVersion: v1
kind: Secret
type: kubernetes.io/basic-auth
metadata:
  name: webhook-credentials
stringData:
  username: '{{ .Values.alertmanager.webhook.username }}' # <1>
  password: '{{ .Values.alertmanager.webhook.password }}' # <2>
# end::fencing-secret[]
---
# tag::fencing-alert-manager-config[]
apiVersion: monitoring.coreos.com/v1beta1
kind: AlertmanagerConfig
metadata:
  name: example-routing
spec:
  route:
    receiver: default
    groupBy:
      - accelerator
    groupInterval: 90s
    groupWait: 60s
    matchers:
      - matchType: =
        name: alertname
        value: SiteOffline
  receivers:
    - name: default
      webhookConfigs:
        - url: '{{ .Values.alertmanager.webhook.url }}' # <3>
          httpConfig:
            basicAuth:
              username:
                key: username
                name: webhook-credentials
              password:
                key: password
                name: webhook-credentials
            tlsConfig:
              insecureSkipVerify: true
# end::fencing-alert-manager-config[]
---
# tag::fencing-prometheus-rule[]
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: xsite-status
spec:
  groups:
    - name: xsite-status
      rules:
        - alert: SiteOffline
          expr: 'min by (namespace, site) (vendor_jgroups_site_view_status{namespace="{{.Release.Namespace}}",site="{{ .Values.crossdc.remote.name }}"}) == 0' # <4>
          labels:
            severity: critical
            reporter: {{ .Values.crossdc.local.name }} # <5>
            accelerator: {{ .Values.acceleratorDNS }} # <6>
# end::fencing-prometheus-rule[]
{{ end }}
